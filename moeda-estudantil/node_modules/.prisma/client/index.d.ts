
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Instituicao
 * 
 */
export type Instituicao = $Result.DefaultSelection<Prisma.$InstituicaoPayload>
/**
 * Model Aluno
 * 
 */
export type Aluno = $Result.DefaultSelection<Prisma.$AlunoPayload>
/**
 * Model Professor
 * 
 */
export type Professor = $Result.DefaultSelection<Prisma.$ProfessorPayload>
/**
 * Model EmpresaParceira
 * 
 */
export type EmpresaParceira = $Result.DefaultSelection<Prisma.$EmpresaParceiraPayload>
/**
 * Model Vantagem
 * 
 */
export type Vantagem = $Result.DefaultSelection<Prisma.$VantagemPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  PROFESSOR: 'PROFESSOR',
  ALUNO: 'ALUNO',
  EMPRESA: 'EMPRESA'
};

export type Role = (typeof Role)[keyof typeof Role]


export const TransactionType: {
  GRANT: 'GRANT',
  REDEEM: 'REDEEM'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.instituicao`: Exposes CRUD operations for the **Instituicao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Instituicaos
    * const instituicaos = await prisma.instituicao.findMany()
    * ```
    */
  get instituicao(): Prisma.InstituicaoDelegate<ExtArgs>;

  /**
   * `prisma.aluno`: Exposes CRUD operations for the **Aluno** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alunos
    * const alunos = await prisma.aluno.findMany()
    * ```
    */
  get aluno(): Prisma.AlunoDelegate<ExtArgs>;

  /**
   * `prisma.professor`: Exposes CRUD operations for the **Professor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professors
    * const professors = await prisma.professor.findMany()
    * ```
    */
  get professor(): Prisma.ProfessorDelegate<ExtArgs>;

  /**
   * `prisma.empresaParceira`: Exposes CRUD operations for the **EmpresaParceira** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmpresaParceiras
    * const empresaParceiras = await prisma.empresaParceira.findMany()
    * ```
    */
  get empresaParceira(): Prisma.EmpresaParceiraDelegate<ExtArgs>;

  /**
   * `prisma.vantagem`: Exposes CRUD operations for the **Vantagem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vantagems
    * const vantagems = await prisma.vantagem.findMany()
    * ```
    */
  get vantagem(): Prisma.VantagemDelegate<ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Instituicao: 'Instituicao',
    Aluno: 'Aluno',
    Professor: 'Professor',
    EmpresaParceira: 'EmpresaParceira',
    Vantagem: 'Vantagem',
    Transaction: 'Transaction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "instituicao" | "aluno" | "professor" | "empresaParceira" | "vantagem" | "transaction"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Instituicao: {
        payload: Prisma.$InstituicaoPayload<ExtArgs>
        fields: Prisma.InstituicaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstituicaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstituicaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload>
          }
          findFirst: {
            args: Prisma.InstituicaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstituicaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload>
          }
          findMany: {
            args: Prisma.InstituicaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload>[]
          }
          create: {
            args: Prisma.InstituicaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload>
          }
          createMany: {
            args: Prisma.InstituicaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstituicaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload>[]
          }
          delete: {
            args: Prisma.InstituicaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload>
          }
          update: {
            args: Prisma.InstituicaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload>
          }
          deleteMany: {
            args: Prisma.InstituicaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstituicaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InstituicaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstituicaoPayload>
          }
          aggregate: {
            args: Prisma.InstituicaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstituicao>
          }
          groupBy: {
            args: Prisma.InstituicaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstituicaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstituicaoCountArgs<ExtArgs>
            result: $Utils.Optional<InstituicaoCountAggregateOutputType> | number
          }
        }
      }
      Aluno: {
        payload: Prisma.$AlunoPayload<ExtArgs>
        fields: Prisma.AlunoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlunoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlunoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          findFirst: {
            args: Prisma.AlunoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlunoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          findMany: {
            args: Prisma.AlunoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>[]
          }
          create: {
            args: Prisma.AlunoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          createMany: {
            args: Prisma.AlunoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlunoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>[]
          }
          delete: {
            args: Prisma.AlunoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          update: {
            args: Prisma.AlunoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          deleteMany: {
            args: Prisma.AlunoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlunoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlunoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          aggregate: {
            args: Prisma.AlunoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAluno>
          }
          groupBy: {
            args: Prisma.AlunoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlunoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlunoCountArgs<ExtArgs>
            result: $Utils.Optional<AlunoCountAggregateOutputType> | number
          }
        }
      }
      Professor: {
        payload: Prisma.$ProfessorPayload<ExtArgs>
        fields: Prisma.ProfessorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findFirst: {
            args: Prisma.ProfessorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findMany: {
            args: Prisma.ProfessorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          create: {
            args: Prisma.ProfessorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          createMany: {
            args: Prisma.ProfessorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          delete: {
            args: Prisma.ProfessorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          update: {
            args: Prisma.ProfessorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          deleteMany: {
            args: Prisma.ProfessorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfessorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          aggregate: {
            args: Prisma.ProfessorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessor>
          }
          groupBy: {
            args: Prisma.ProfessorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessorCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessorCountAggregateOutputType> | number
          }
        }
      }
      EmpresaParceira: {
        payload: Prisma.$EmpresaParceiraPayload<ExtArgs>
        fields: Prisma.EmpresaParceiraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmpresaParceiraFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmpresaParceiraFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload>
          }
          findFirst: {
            args: Prisma.EmpresaParceiraFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmpresaParceiraFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload>
          }
          findMany: {
            args: Prisma.EmpresaParceiraFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload>[]
          }
          create: {
            args: Prisma.EmpresaParceiraCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload>
          }
          createMany: {
            args: Prisma.EmpresaParceiraCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmpresaParceiraCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload>[]
          }
          delete: {
            args: Prisma.EmpresaParceiraDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload>
          }
          update: {
            args: Prisma.EmpresaParceiraUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload>
          }
          deleteMany: {
            args: Prisma.EmpresaParceiraDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmpresaParceiraUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmpresaParceiraUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaParceiraPayload>
          }
          aggregate: {
            args: Prisma.EmpresaParceiraAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmpresaParceira>
          }
          groupBy: {
            args: Prisma.EmpresaParceiraGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmpresaParceiraGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmpresaParceiraCountArgs<ExtArgs>
            result: $Utils.Optional<EmpresaParceiraCountAggregateOutputType> | number
          }
        }
      }
      Vantagem: {
        payload: Prisma.$VantagemPayload<ExtArgs>
        fields: Prisma.VantagemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VantagemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VantagemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload>
          }
          findFirst: {
            args: Prisma.VantagemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VantagemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload>
          }
          findMany: {
            args: Prisma.VantagemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload>[]
          }
          create: {
            args: Prisma.VantagemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload>
          }
          createMany: {
            args: Prisma.VantagemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VantagemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload>[]
          }
          delete: {
            args: Prisma.VantagemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload>
          }
          update: {
            args: Prisma.VantagemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload>
          }
          deleteMany: {
            args: Prisma.VantagemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VantagemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VantagemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VantagemPayload>
          }
          aggregate: {
            args: Prisma.VantagemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVantagem>
          }
          groupBy: {
            args: Prisma.VantagemGroupByArgs<ExtArgs>
            result: $Utils.Optional<VantagemGroupByOutputType>[]
          }
          count: {
            args: Prisma.VantagemCountArgs<ExtArgs>
            result: $Utils.Optional<VantagemCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type InstituicaoCountOutputType
   */

  export type InstituicaoCountOutputType = {
    alunos: number
    professores: number
  }

  export type InstituicaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alunos?: boolean | InstituicaoCountOutputTypeCountAlunosArgs
    professores?: boolean | InstituicaoCountOutputTypeCountProfessoresArgs
  }

  // Custom InputTypes
  /**
   * InstituicaoCountOutputType without action
   */
  export type InstituicaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstituicaoCountOutputType
     */
    select?: InstituicaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstituicaoCountOutputType without action
   */
  export type InstituicaoCountOutputTypeCountAlunosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlunoWhereInput
  }

  /**
   * InstituicaoCountOutputType without action
   */
  export type InstituicaoCountOutputTypeCountProfessoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorWhereInput
  }


  /**
   * Count Type AlunoCountOutputType
   */

  export type AlunoCountOutputType = {
    user: number
    recebimentos: number
    resgates: number
  }

  export type AlunoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AlunoCountOutputTypeCountUserArgs
    recebimentos?: boolean | AlunoCountOutputTypeCountRecebimentosArgs
    resgates?: boolean | AlunoCountOutputTypeCountResgatesArgs
  }

  // Custom InputTypes
  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlunoCountOutputType
     */
    select?: AlunoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeCountRecebimentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeCountResgatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type ProfessorCountOutputType
   */

  export type ProfessorCountOutputType = {
    user: number
    envios: number
  }

  export type ProfessorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ProfessorCountOutputTypeCountUserArgs
    envios?: boolean | ProfessorCountOutputTypeCountEnviosArgs
  }

  // Custom InputTypes
  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorCountOutputType
     */
    select?: ProfessorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountEnviosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type EmpresaParceiraCountOutputType
   */

  export type EmpresaParceiraCountOutputType = {
    vantagens: number
    user: number
  }

  export type EmpresaParceiraCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vantagens?: boolean | EmpresaParceiraCountOutputTypeCountVantagensArgs
    user?: boolean | EmpresaParceiraCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * EmpresaParceiraCountOutputType without action
   */
  export type EmpresaParceiraCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceiraCountOutputType
     */
    select?: EmpresaParceiraCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmpresaParceiraCountOutputType without action
   */
  export type EmpresaParceiraCountOutputTypeCountVantagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VantagemWhereInput
  }

  /**
   * EmpresaParceiraCountOutputType without action
   */
  export type EmpresaParceiraCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type VantagemCountOutputType
   */

  export type VantagemCountOutputType = {
    resgates: number
  }

  export type VantagemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resgates?: boolean | VantagemCountOutputTypeCountResgatesArgs
  }

  // Custom InputTypes
  /**
   * VantagemCountOutputType without action
   */
  export type VantagemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VantagemCountOutputType
     */
    select?: VantagemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VantagemCountOutputType without action
   */
  export type VantagemCountOutputTypeCountResgatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    alunoId: string | null
    professorId: string | null
    empresaId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    alunoId: string | null
    professorId: string | null
    empresaId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    createdAt: number
    alunoId: number
    professorId: number
    empresaId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    alunoId?: true
    professorId?: true
    empresaId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    alunoId?: true
    professorId?: true
    empresaId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    alunoId?: true
    professorId?: true
    empresaId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt: Date
    alunoId: string | null
    professorId: string | null
    empresaId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    alunoId?: boolean
    professorId?: boolean
    empresaId?: boolean
    aluno?: boolean | User$alunoArgs<ExtArgs>
    professor?: boolean | User$professorArgs<ExtArgs>
    empresa?: boolean | User$empresaArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    alunoId?: boolean
    professorId?: boolean
    empresaId?: boolean
    aluno?: boolean | User$alunoArgs<ExtArgs>
    professor?: boolean | User$professorArgs<ExtArgs>
    empresa?: boolean | User$empresaArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    alunoId?: boolean
    professorId?: boolean
    empresaId?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aluno?: boolean | User$alunoArgs<ExtArgs>
    professor?: boolean | User$professorArgs<ExtArgs>
    empresa?: boolean | User$empresaArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aluno?: boolean | User$alunoArgs<ExtArgs>
    professor?: boolean | User$professorArgs<ExtArgs>
    empresa?: boolean | User$empresaArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      aluno: Prisma.$AlunoPayload<ExtArgs> | null
      professor: Prisma.$ProfessorPayload<ExtArgs> | null
      empresa: Prisma.$EmpresaParceiraPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      role: $Enums.Role
      createdAt: Date
      alunoId: string | null
      professorId: string | null
      empresaId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    aluno<T extends User$alunoArgs<ExtArgs> = {}>(args?: Subset<T, User$alunoArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    professor<T extends User$professorArgs<ExtArgs> = {}>(args?: Subset<T, User$professorArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    empresa<T extends User$empresaArgs<ExtArgs> = {}>(args?: Subset<T, User$empresaArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly alunoId: FieldRef<"User", 'String'>
    readonly professorId: FieldRef<"User", 'String'>
    readonly empresaId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.aluno
   */
  export type User$alunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    where?: AlunoWhereInput
  }

  /**
   * User.professor
   */
  export type User$professorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    where?: ProfessorWhereInput
  }

  /**
   * User.empresa
   */
  export type User$empresaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    where?: EmpresaParceiraWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Instituicao
   */

  export type AggregateInstituicao = {
    _count: InstituicaoCountAggregateOutputType | null
    _min: InstituicaoMinAggregateOutputType | null
    _max: InstituicaoMaxAggregateOutputType | null
  }

  export type InstituicaoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    endereco: string | null
    createdAt: Date | null
  }

  export type InstituicaoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    endereco: string | null
    createdAt: Date | null
  }

  export type InstituicaoCountAggregateOutputType = {
    id: number
    nome: number
    endereco: number
    createdAt: number
    _all: number
  }


  export type InstituicaoMinAggregateInputType = {
    id?: true
    nome?: true
    endereco?: true
    createdAt?: true
  }

  export type InstituicaoMaxAggregateInputType = {
    id?: true
    nome?: true
    endereco?: true
    createdAt?: true
  }

  export type InstituicaoCountAggregateInputType = {
    id?: true
    nome?: true
    endereco?: true
    createdAt?: true
    _all?: true
  }

  export type InstituicaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instituicao to aggregate.
     */
    where?: InstituicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instituicaos to fetch.
     */
    orderBy?: InstituicaoOrderByWithRelationInput | InstituicaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstituicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instituicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instituicaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Instituicaos
    **/
    _count?: true | InstituicaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstituicaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstituicaoMaxAggregateInputType
  }

  export type GetInstituicaoAggregateType<T extends InstituicaoAggregateArgs> = {
        [P in keyof T & keyof AggregateInstituicao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstituicao[P]>
      : GetScalarType<T[P], AggregateInstituicao[P]>
  }




  export type InstituicaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstituicaoWhereInput
    orderBy?: InstituicaoOrderByWithAggregationInput | InstituicaoOrderByWithAggregationInput[]
    by: InstituicaoScalarFieldEnum[] | InstituicaoScalarFieldEnum
    having?: InstituicaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstituicaoCountAggregateInputType | true
    _min?: InstituicaoMinAggregateInputType
    _max?: InstituicaoMaxAggregateInputType
  }

  export type InstituicaoGroupByOutputType = {
    id: string
    nome: string
    endereco: string
    createdAt: Date
    _count: InstituicaoCountAggregateOutputType | null
    _min: InstituicaoMinAggregateOutputType | null
    _max: InstituicaoMaxAggregateOutputType | null
  }

  type GetInstituicaoGroupByPayload<T extends InstituicaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstituicaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstituicaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstituicaoGroupByOutputType[P]>
            : GetScalarType<T[P], InstituicaoGroupByOutputType[P]>
        }
      >
    >


  export type InstituicaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    endereco?: boolean
    createdAt?: boolean
    alunos?: boolean | Instituicao$alunosArgs<ExtArgs>
    professores?: boolean | Instituicao$professoresArgs<ExtArgs>
    _count?: boolean | InstituicaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instituicao"]>

  export type InstituicaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    endereco?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["instituicao"]>

  export type InstituicaoSelectScalar = {
    id?: boolean
    nome?: boolean
    endereco?: boolean
    createdAt?: boolean
  }

  export type InstituicaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alunos?: boolean | Instituicao$alunosArgs<ExtArgs>
    professores?: boolean | Instituicao$professoresArgs<ExtArgs>
    _count?: boolean | InstituicaoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InstituicaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InstituicaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Instituicao"
    objects: {
      alunos: Prisma.$AlunoPayload<ExtArgs>[]
      professores: Prisma.$ProfessorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      endereco: string
      createdAt: Date
    }, ExtArgs["result"]["instituicao"]>
    composites: {}
  }

  type InstituicaoGetPayload<S extends boolean | null | undefined | InstituicaoDefaultArgs> = $Result.GetResult<Prisma.$InstituicaoPayload, S>

  type InstituicaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InstituicaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InstituicaoCountAggregateInputType | true
    }

  export interface InstituicaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Instituicao'], meta: { name: 'Instituicao' } }
    /**
     * Find zero or one Instituicao that matches the filter.
     * @param {InstituicaoFindUniqueArgs} args - Arguments to find a Instituicao
     * @example
     * // Get one Instituicao
     * const instituicao = await prisma.instituicao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstituicaoFindUniqueArgs>(args: SelectSubset<T, InstituicaoFindUniqueArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Instituicao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InstituicaoFindUniqueOrThrowArgs} args - Arguments to find a Instituicao
     * @example
     * // Get one Instituicao
     * const instituicao = await prisma.instituicao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstituicaoFindUniqueOrThrowArgs>(args: SelectSubset<T, InstituicaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Instituicao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoFindFirstArgs} args - Arguments to find a Instituicao
     * @example
     * // Get one Instituicao
     * const instituicao = await prisma.instituicao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstituicaoFindFirstArgs>(args?: SelectSubset<T, InstituicaoFindFirstArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Instituicao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoFindFirstOrThrowArgs} args - Arguments to find a Instituicao
     * @example
     * // Get one Instituicao
     * const instituicao = await prisma.instituicao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstituicaoFindFirstOrThrowArgs>(args?: SelectSubset<T, InstituicaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Instituicaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Instituicaos
     * const instituicaos = await prisma.instituicao.findMany()
     * 
     * // Get first 10 Instituicaos
     * const instituicaos = await prisma.instituicao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instituicaoWithIdOnly = await prisma.instituicao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InstituicaoFindManyArgs>(args?: SelectSubset<T, InstituicaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Instituicao.
     * @param {InstituicaoCreateArgs} args - Arguments to create a Instituicao.
     * @example
     * // Create one Instituicao
     * const Instituicao = await prisma.instituicao.create({
     *   data: {
     *     // ... data to create a Instituicao
     *   }
     * })
     * 
     */
    create<T extends InstituicaoCreateArgs>(args: SelectSubset<T, InstituicaoCreateArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Instituicaos.
     * @param {InstituicaoCreateManyArgs} args - Arguments to create many Instituicaos.
     * @example
     * // Create many Instituicaos
     * const instituicao = await prisma.instituicao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstituicaoCreateManyArgs>(args?: SelectSubset<T, InstituicaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Instituicaos and returns the data saved in the database.
     * @param {InstituicaoCreateManyAndReturnArgs} args - Arguments to create many Instituicaos.
     * @example
     * // Create many Instituicaos
     * const instituicao = await prisma.instituicao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Instituicaos and only return the `id`
     * const instituicaoWithIdOnly = await prisma.instituicao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstituicaoCreateManyAndReturnArgs>(args?: SelectSubset<T, InstituicaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Instituicao.
     * @param {InstituicaoDeleteArgs} args - Arguments to delete one Instituicao.
     * @example
     * // Delete one Instituicao
     * const Instituicao = await prisma.instituicao.delete({
     *   where: {
     *     // ... filter to delete one Instituicao
     *   }
     * })
     * 
     */
    delete<T extends InstituicaoDeleteArgs>(args: SelectSubset<T, InstituicaoDeleteArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Instituicao.
     * @param {InstituicaoUpdateArgs} args - Arguments to update one Instituicao.
     * @example
     * // Update one Instituicao
     * const instituicao = await prisma.instituicao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstituicaoUpdateArgs>(args: SelectSubset<T, InstituicaoUpdateArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Instituicaos.
     * @param {InstituicaoDeleteManyArgs} args - Arguments to filter Instituicaos to delete.
     * @example
     * // Delete a few Instituicaos
     * const { count } = await prisma.instituicao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstituicaoDeleteManyArgs>(args?: SelectSubset<T, InstituicaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instituicaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Instituicaos
     * const instituicao = await prisma.instituicao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstituicaoUpdateManyArgs>(args: SelectSubset<T, InstituicaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Instituicao.
     * @param {InstituicaoUpsertArgs} args - Arguments to update or create a Instituicao.
     * @example
     * // Update or create a Instituicao
     * const instituicao = await prisma.instituicao.upsert({
     *   create: {
     *     // ... data to create a Instituicao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Instituicao we want to update
     *   }
     * })
     */
    upsert<T extends InstituicaoUpsertArgs>(args: SelectSubset<T, InstituicaoUpsertArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Instituicaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoCountArgs} args - Arguments to filter Instituicaos to count.
     * @example
     * // Count the number of Instituicaos
     * const count = await prisma.instituicao.count({
     *   where: {
     *     // ... the filter for the Instituicaos we want to count
     *   }
     * })
    **/
    count<T extends InstituicaoCountArgs>(
      args?: Subset<T, InstituicaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstituicaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Instituicao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstituicaoAggregateArgs>(args: Subset<T, InstituicaoAggregateArgs>): Prisma.PrismaPromise<GetInstituicaoAggregateType<T>>

    /**
     * Group by Instituicao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituicaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstituicaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstituicaoGroupByArgs['orderBy'] }
        : { orderBy?: InstituicaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstituicaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstituicaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Instituicao model
   */
  readonly fields: InstituicaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Instituicao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstituicaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    alunos<T extends Instituicao$alunosArgs<ExtArgs> = {}>(args?: Subset<T, Instituicao$alunosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findMany"> | Null>
    professores<T extends Instituicao$professoresArgs<ExtArgs> = {}>(args?: Subset<T, Instituicao$professoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Instituicao model
   */ 
  interface InstituicaoFieldRefs {
    readonly id: FieldRef<"Instituicao", 'String'>
    readonly nome: FieldRef<"Instituicao", 'String'>
    readonly endereco: FieldRef<"Instituicao", 'String'>
    readonly createdAt: FieldRef<"Instituicao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Instituicao findUnique
   */
  export type InstituicaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    /**
     * Filter, which Instituicao to fetch.
     */
    where: InstituicaoWhereUniqueInput
  }

  /**
   * Instituicao findUniqueOrThrow
   */
  export type InstituicaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    /**
     * Filter, which Instituicao to fetch.
     */
    where: InstituicaoWhereUniqueInput
  }

  /**
   * Instituicao findFirst
   */
  export type InstituicaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    /**
     * Filter, which Instituicao to fetch.
     */
    where?: InstituicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instituicaos to fetch.
     */
    orderBy?: InstituicaoOrderByWithRelationInput | InstituicaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instituicaos.
     */
    cursor?: InstituicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instituicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instituicaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instituicaos.
     */
    distinct?: InstituicaoScalarFieldEnum | InstituicaoScalarFieldEnum[]
  }

  /**
   * Instituicao findFirstOrThrow
   */
  export type InstituicaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    /**
     * Filter, which Instituicao to fetch.
     */
    where?: InstituicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instituicaos to fetch.
     */
    orderBy?: InstituicaoOrderByWithRelationInput | InstituicaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instituicaos.
     */
    cursor?: InstituicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instituicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instituicaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instituicaos.
     */
    distinct?: InstituicaoScalarFieldEnum | InstituicaoScalarFieldEnum[]
  }

  /**
   * Instituicao findMany
   */
  export type InstituicaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    /**
     * Filter, which Instituicaos to fetch.
     */
    where?: InstituicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instituicaos to fetch.
     */
    orderBy?: InstituicaoOrderByWithRelationInput | InstituicaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Instituicaos.
     */
    cursor?: InstituicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instituicaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instituicaos.
     */
    skip?: number
    distinct?: InstituicaoScalarFieldEnum | InstituicaoScalarFieldEnum[]
  }

  /**
   * Instituicao create
   */
  export type InstituicaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Instituicao.
     */
    data: XOR<InstituicaoCreateInput, InstituicaoUncheckedCreateInput>
  }

  /**
   * Instituicao createMany
   */
  export type InstituicaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Instituicaos.
     */
    data: InstituicaoCreateManyInput | InstituicaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Instituicao createManyAndReturn
   */
  export type InstituicaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Instituicaos.
     */
    data: InstituicaoCreateManyInput | InstituicaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Instituicao update
   */
  export type InstituicaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Instituicao.
     */
    data: XOR<InstituicaoUpdateInput, InstituicaoUncheckedUpdateInput>
    /**
     * Choose, which Instituicao to update.
     */
    where: InstituicaoWhereUniqueInput
  }

  /**
   * Instituicao updateMany
   */
  export type InstituicaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Instituicaos.
     */
    data: XOR<InstituicaoUpdateManyMutationInput, InstituicaoUncheckedUpdateManyInput>
    /**
     * Filter which Instituicaos to update
     */
    where?: InstituicaoWhereInput
  }

  /**
   * Instituicao upsert
   */
  export type InstituicaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Instituicao to update in case it exists.
     */
    where: InstituicaoWhereUniqueInput
    /**
     * In case the Instituicao found by the `where` argument doesn't exist, create a new Instituicao with this data.
     */
    create: XOR<InstituicaoCreateInput, InstituicaoUncheckedCreateInput>
    /**
     * In case the Instituicao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstituicaoUpdateInput, InstituicaoUncheckedUpdateInput>
  }

  /**
   * Instituicao delete
   */
  export type InstituicaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    /**
     * Filter which Instituicao to delete.
     */
    where: InstituicaoWhereUniqueInput
  }

  /**
   * Instituicao deleteMany
   */
  export type InstituicaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instituicaos to delete
     */
    where?: InstituicaoWhereInput
  }

  /**
   * Instituicao.alunos
   */
  export type Instituicao$alunosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    where?: AlunoWhereInput
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    cursor?: AlunoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }

  /**
   * Instituicao.professores
   */
  export type Instituicao$professoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    where?: ProfessorWhereInput
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    cursor?: ProfessorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Instituicao without action
   */
  export type InstituicaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
  }


  /**
   * Model Aluno
   */

  export type AggregateAluno = {
    _count: AlunoCountAggregateOutputType | null
    _avg: AlunoAvgAggregateOutputType | null
    _sum: AlunoSumAggregateOutputType | null
    _min: AlunoMinAggregateOutputType | null
    _max: AlunoMaxAggregateOutputType | null
  }

  export type AlunoAvgAggregateOutputType = {
    saldoMoedas: number | null
  }

  export type AlunoSumAggregateOutputType = {
    saldoMoedas: number | null
  }

  export type AlunoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    cpf: string | null
    rg: string | null
    endereco: string | null
    curso: string | null
    saldoMoedas: number | null
    createdAt: Date | null
    instituicaoId: string | null
  }

  export type AlunoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    cpf: string | null
    rg: string | null
    endereco: string | null
    curso: string | null
    saldoMoedas: number | null
    createdAt: Date | null
    instituicaoId: string | null
  }

  export type AlunoCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    cpf: number
    rg: number
    endereco: number
    curso: number
    saldoMoedas: number
    createdAt: number
    instituicaoId: number
    _all: number
  }


  export type AlunoAvgAggregateInputType = {
    saldoMoedas?: true
  }

  export type AlunoSumAggregateInputType = {
    saldoMoedas?: true
  }

  export type AlunoMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    cpf?: true
    rg?: true
    endereco?: true
    curso?: true
    saldoMoedas?: true
    createdAt?: true
    instituicaoId?: true
  }

  export type AlunoMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    cpf?: true
    rg?: true
    endereco?: true
    curso?: true
    saldoMoedas?: true
    createdAt?: true
    instituicaoId?: true
  }

  export type AlunoCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    cpf?: true
    rg?: true
    endereco?: true
    curso?: true
    saldoMoedas?: true
    createdAt?: true
    instituicaoId?: true
    _all?: true
  }

  export type AlunoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aluno to aggregate.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alunos
    **/
    _count?: true | AlunoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlunoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlunoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlunoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlunoMaxAggregateInputType
  }

  export type GetAlunoAggregateType<T extends AlunoAggregateArgs> = {
        [P in keyof T & keyof AggregateAluno]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAluno[P]>
      : GetScalarType<T[P], AggregateAluno[P]>
  }




  export type AlunoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlunoWhereInput
    orderBy?: AlunoOrderByWithAggregationInput | AlunoOrderByWithAggregationInput[]
    by: AlunoScalarFieldEnum[] | AlunoScalarFieldEnum
    having?: AlunoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlunoCountAggregateInputType | true
    _avg?: AlunoAvgAggregateInputType
    _sum?: AlunoSumAggregateInputType
    _min?: AlunoMinAggregateInputType
    _max?: AlunoMaxAggregateInputType
  }

  export type AlunoGroupByOutputType = {
    id: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas: number
    createdAt: Date
    instituicaoId: string | null
    _count: AlunoCountAggregateOutputType | null
    _avg: AlunoAvgAggregateOutputType | null
    _sum: AlunoSumAggregateOutputType | null
    _min: AlunoMinAggregateOutputType | null
    _max: AlunoMaxAggregateOutputType | null
  }

  type GetAlunoGroupByPayload<T extends AlunoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlunoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlunoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlunoGroupByOutputType[P]>
            : GetScalarType<T[P], AlunoGroupByOutputType[P]>
        }
      >
    >


  export type AlunoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    cpf?: boolean
    rg?: boolean
    endereco?: boolean
    curso?: boolean
    saldoMoedas?: boolean
    createdAt?: boolean
    instituicaoId?: boolean
    instituicao?: boolean | Aluno$instituicaoArgs<ExtArgs>
    user?: boolean | Aluno$userArgs<ExtArgs>
    recebimentos?: boolean | Aluno$recebimentosArgs<ExtArgs>
    resgates?: boolean | Aluno$resgatesArgs<ExtArgs>
    _count?: boolean | AlunoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aluno"]>

  export type AlunoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    cpf?: boolean
    rg?: boolean
    endereco?: boolean
    curso?: boolean
    saldoMoedas?: boolean
    createdAt?: boolean
    instituicaoId?: boolean
    instituicao?: boolean | Aluno$instituicaoArgs<ExtArgs>
  }, ExtArgs["result"]["aluno"]>

  export type AlunoSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    cpf?: boolean
    rg?: boolean
    endereco?: boolean
    curso?: boolean
    saldoMoedas?: boolean
    createdAt?: boolean
    instituicaoId?: boolean
  }

  export type AlunoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instituicao?: boolean | Aluno$instituicaoArgs<ExtArgs>
    user?: boolean | Aluno$userArgs<ExtArgs>
    recebimentos?: boolean | Aluno$recebimentosArgs<ExtArgs>
    resgates?: boolean | Aluno$resgatesArgs<ExtArgs>
    _count?: boolean | AlunoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlunoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instituicao?: boolean | Aluno$instituicaoArgs<ExtArgs>
  }

  export type $AlunoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aluno"
    objects: {
      instituicao: Prisma.$InstituicaoPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>[]
      recebimentos: Prisma.$TransactionPayload<ExtArgs>[]
      resgates: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      email: string
      cpf: string
      rg: string
      endereco: string
      curso: string
      saldoMoedas: number
      createdAt: Date
      instituicaoId: string | null
    }, ExtArgs["result"]["aluno"]>
    composites: {}
  }

  type AlunoGetPayload<S extends boolean | null | undefined | AlunoDefaultArgs> = $Result.GetResult<Prisma.$AlunoPayload, S>

  type AlunoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlunoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlunoCountAggregateInputType | true
    }

  export interface AlunoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aluno'], meta: { name: 'Aluno' } }
    /**
     * Find zero or one Aluno that matches the filter.
     * @param {AlunoFindUniqueArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlunoFindUniqueArgs>(args: SelectSubset<T, AlunoFindUniqueArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Aluno that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlunoFindUniqueOrThrowArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlunoFindUniqueOrThrowArgs>(args: SelectSubset<T, AlunoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Aluno that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoFindFirstArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlunoFindFirstArgs>(args?: SelectSubset<T, AlunoFindFirstArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Aluno that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoFindFirstOrThrowArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlunoFindFirstOrThrowArgs>(args?: SelectSubset<T, AlunoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alunos
     * const alunos = await prisma.aluno.findMany()
     * 
     * // Get first 10 Alunos
     * const alunos = await prisma.aluno.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alunoWithIdOnly = await prisma.aluno.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlunoFindManyArgs>(args?: SelectSubset<T, AlunoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Aluno.
     * @param {AlunoCreateArgs} args - Arguments to create a Aluno.
     * @example
     * // Create one Aluno
     * const Aluno = await prisma.aluno.create({
     *   data: {
     *     // ... data to create a Aluno
     *   }
     * })
     * 
     */
    create<T extends AlunoCreateArgs>(args: SelectSubset<T, AlunoCreateArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alunos.
     * @param {AlunoCreateManyArgs} args - Arguments to create many Alunos.
     * @example
     * // Create many Alunos
     * const aluno = await prisma.aluno.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlunoCreateManyArgs>(args?: SelectSubset<T, AlunoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alunos and returns the data saved in the database.
     * @param {AlunoCreateManyAndReturnArgs} args - Arguments to create many Alunos.
     * @example
     * // Create many Alunos
     * const aluno = await prisma.aluno.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alunos and only return the `id`
     * const alunoWithIdOnly = await prisma.aluno.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlunoCreateManyAndReturnArgs>(args?: SelectSubset<T, AlunoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Aluno.
     * @param {AlunoDeleteArgs} args - Arguments to delete one Aluno.
     * @example
     * // Delete one Aluno
     * const Aluno = await prisma.aluno.delete({
     *   where: {
     *     // ... filter to delete one Aluno
     *   }
     * })
     * 
     */
    delete<T extends AlunoDeleteArgs>(args: SelectSubset<T, AlunoDeleteArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Aluno.
     * @param {AlunoUpdateArgs} args - Arguments to update one Aluno.
     * @example
     * // Update one Aluno
     * const aluno = await prisma.aluno.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlunoUpdateArgs>(args: SelectSubset<T, AlunoUpdateArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alunos.
     * @param {AlunoDeleteManyArgs} args - Arguments to filter Alunos to delete.
     * @example
     * // Delete a few Alunos
     * const { count } = await prisma.aluno.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlunoDeleteManyArgs>(args?: SelectSubset<T, AlunoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alunos
     * const aluno = await prisma.aluno.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlunoUpdateManyArgs>(args: SelectSubset<T, AlunoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aluno.
     * @param {AlunoUpsertArgs} args - Arguments to update or create a Aluno.
     * @example
     * // Update or create a Aluno
     * const aluno = await prisma.aluno.upsert({
     *   create: {
     *     // ... data to create a Aluno
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aluno we want to update
     *   }
     * })
     */
    upsert<T extends AlunoUpsertArgs>(args: SelectSubset<T, AlunoUpsertArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoCountArgs} args - Arguments to filter Alunos to count.
     * @example
     * // Count the number of Alunos
     * const count = await prisma.aluno.count({
     *   where: {
     *     // ... the filter for the Alunos we want to count
     *   }
     * })
    **/
    count<T extends AlunoCountArgs>(
      args?: Subset<T, AlunoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlunoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlunoAggregateArgs>(args: Subset<T, AlunoAggregateArgs>): Prisma.PrismaPromise<GetAlunoAggregateType<T>>

    /**
     * Group by Aluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlunoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlunoGroupByArgs['orderBy'] }
        : { orderBy?: AlunoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlunoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlunoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aluno model
   */
  readonly fields: AlunoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aluno.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlunoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instituicao<T extends Aluno$instituicaoArgs<ExtArgs> = {}>(args?: Subset<T, Aluno$instituicaoArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends Aluno$userArgs<ExtArgs> = {}>(args?: Subset<T, Aluno$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    recebimentos<T extends Aluno$recebimentosArgs<ExtArgs> = {}>(args?: Subset<T, Aluno$recebimentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    resgates<T extends Aluno$resgatesArgs<ExtArgs> = {}>(args?: Subset<T, Aluno$resgatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Aluno model
   */ 
  interface AlunoFieldRefs {
    readonly id: FieldRef<"Aluno", 'String'>
    readonly nome: FieldRef<"Aluno", 'String'>
    readonly email: FieldRef<"Aluno", 'String'>
    readonly cpf: FieldRef<"Aluno", 'String'>
    readonly rg: FieldRef<"Aluno", 'String'>
    readonly endereco: FieldRef<"Aluno", 'String'>
    readonly curso: FieldRef<"Aluno", 'String'>
    readonly saldoMoedas: FieldRef<"Aluno", 'Int'>
    readonly createdAt: FieldRef<"Aluno", 'DateTime'>
    readonly instituicaoId: FieldRef<"Aluno", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Aluno findUnique
   */
  export type AlunoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where: AlunoWhereUniqueInput
  }

  /**
   * Aluno findUniqueOrThrow
   */
  export type AlunoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where: AlunoWhereUniqueInput
  }

  /**
   * Aluno findFirst
   */
  export type AlunoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alunos.
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alunos.
     */
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }

  /**
   * Aluno findFirstOrThrow
   */
  export type AlunoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alunos.
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alunos.
     */
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }

  /**
   * Aluno findMany
   */
  export type AlunoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Alunos to fetch.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alunos.
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }

  /**
   * Aluno create
   */
  export type AlunoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * The data needed to create a Aluno.
     */
    data: XOR<AlunoCreateInput, AlunoUncheckedCreateInput>
  }

  /**
   * Aluno createMany
   */
  export type AlunoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alunos.
     */
    data: AlunoCreateManyInput | AlunoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Aluno createManyAndReturn
   */
  export type AlunoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Alunos.
     */
    data: AlunoCreateManyInput | AlunoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Aluno update
   */
  export type AlunoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * The data needed to update a Aluno.
     */
    data: XOR<AlunoUpdateInput, AlunoUncheckedUpdateInput>
    /**
     * Choose, which Aluno to update.
     */
    where: AlunoWhereUniqueInput
  }

  /**
   * Aluno updateMany
   */
  export type AlunoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alunos.
     */
    data: XOR<AlunoUpdateManyMutationInput, AlunoUncheckedUpdateManyInput>
    /**
     * Filter which Alunos to update
     */
    where?: AlunoWhereInput
  }

  /**
   * Aluno upsert
   */
  export type AlunoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * The filter to search for the Aluno to update in case it exists.
     */
    where: AlunoWhereUniqueInput
    /**
     * In case the Aluno found by the `where` argument doesn't exist, create a new Aluno with this data.
     */
    create: XOR<AlunoCreateInput, AlunoUncheckedCreateInput>
    /**
     * In case the Aluno was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlunoUpdateInput, AlunoUncheckedUpdateInput>
  }

  /**
   * Aluno delete
   */
  export type AlunoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter which Aluno to delete.
     */
    where: AlunoWhereUniqueInput
  }

  /**
   * Aluno deleteMany
   */
  export type AlunoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alunos to delete
     */
    where?: AlunoWhereInput
  }

  /**
   * Aluno.instituicao
   */
  export type Aluno$instituicaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    where?: InstituicaoWhereInput
  }

  /**
   * Aluno.user
   */
  export type Aluno$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Aluno.recebimentos
   */
  export type Aluno$recebimentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Aluno.resgates
   */
  export type Aluno$resgatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Aluno without action
   */
  export type AlunoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
  }


  /**
   * Model Professor
   */

  export type AggregateProfessor = {
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  export type ProfessorAvgAggregateOutputType = {
    saldoMoedas: number | null
  }

  export type ProfessorSumAggregateOutputType = {
    saldoMoedas: number | null
  }

  export type ProfessorMinAggregateOutputType = {
    id: string | null
    nome: string | null
    cpf: string | null
    departamento: string | null
    saldoMoedas: number | null
    lastAllocationAt: Date | null
    createdAt: Date | null
    instituicaoId: string | null
  }

  export type ProfessorMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    cpf: string | null
    departamento: string | null
    saldoMoedas: number | null
    lastAllocationAt: Date | null
    createdAt: Date | null
    instituicaoId: string | null
  }

  export type ProfessorCountAggregateOutputType = {
    id: number
    nome: number
    cpf: number
    departamento: number
    saldoMoedas: number
    lastAllocationAt: number
    createdAt: number
    instituicaoId: number
    _all: number
  }


  export type ProfessorAvgAggregateInputType = {
    saldoMoedas?: true
  }

  export type ProfessorSumAggregateInputType = {
    saldoMoedas?: true
  }

  export type ProfessorMinAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    departamento?: true
    saldoMoedas?: true
    lastAllocationAt?: true
    createdAt?: true
    instituicaoId?: true
  }

  export type ProfessorMaxAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    departamento?: true
    saldoMoedas?: true
    lastAllocationAt?: true
    createdAt?: true
    instituicaoId?: true
  }

  export type ProfessorCountAggregateInputType = {
    id?: true
    nome?: true
    cpf?: true
    departamento?: true
    saldoMoedas?: true
    lastAllocationAt?: true
    createdAt?: true
    instituicaoId?: true
    _all?: true
  }

  export type ProfessorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor to aggregate.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professors
    **/
    _count?: true | ProfessorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorMaxAggregateInputType
  }

  export type GetProfessorAggregateType<T extends ProfessorAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor[P]>
      : GetScalarType<T[P], AggregateProfessor[P]>
  }




  export type ProfessorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorWhereInput
    orderBy?: ProfessorOrderByWithAggregationInput | ProfessorOrderByWithAggregationInput[]
    by: ProfessorScalarFieldEnum[] | ProfessorScalarFieldEnum
    having?: ProfessorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorCountAggregateInputType | true
    _avg?: ProfessorAvgAggregateInputType
    _sum?: ProfessorSumAggregateInputType
    _min?: ProfessorMinAggregateInputType
    _max?: ProfessorMaxAggregateInputType
  }

  export type ProfessorGroupByOutputType = {
    id: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas: number
    lastAllocationAt: Date | null
    createdAt: Date
    instituicaoId: string | null
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  type GetProfessorGroupByPayload<T extends ProfessorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
        }
      >
    >


  export type ProfessorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cpf?: boolean
    departamento?: boolean
    saldoMoedas?: boolean
    lastAllocationAt?: boolean
    createdAt?: boolean
    instituicaoId?: boolean
    instituicao?: boolean | Professor$instituicaoArgs<ExtArgs>
    user?: boolean | Professor$userArgs<ExtArgs>
    envios?: boolean | Professor$enviosArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cpf?: boolean
    departamento?: boolean
    saldoMoedas?: boolean
    lastAllocationAt?: boolean
    createdAt?: boolean
    instituicaoId?: boolean
    instituicao?: boolean | Professor$instituicaoArgs<ExtArgs>
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectScalar = {
    id?: boolean
    nome?: boolean
    cpf?: boolean
    departamento?: boolean
    saldoMoedas?: boolean
    lastAllocationAt?: boolean
    createdAt?: boolean
    instituicaoId?: boolean
  }

  export type ProfessorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instituicao?: boolean | Professor$instituicaoArgs<ExtArgs>
    user?: boolean | Professor$userArgs<ExtArgs>
    envios?: boolean | Professor$enviosArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfessorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instituicao?: boolean | Professor$instituicaoArgs<ExtArgs>
  }

  export type $ProfessorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professor"
    objects: {
      instituicao: Prisma.$InstituicaoPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>[]
      envios: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      cpf: string
      departamento: string
      saldoMoedas: number
      lastAllocationAt: Date | null
      createdAt: Date
      instituicaoId: string | null
    }, ExtArgs["result"]["professor"]>
    composites: {}
  }

  type ProfessorGetPayload<S extends boolean | null | undefined | ProfessorDefaultArgs> = $Result.GetResult<Prisma.$ProfessorPayload, S>

  type ProfessorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfessorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfessorCountAggregateInputType | true
    }

  export interface ProfessorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professor'], meta: { name: 'Professor' } }
    /**
     * Find zero or one Professor that matches the filter.
     * @param {ProfessorFindUniqueArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessorFindUniqueArgs>(args: SelectSubset<T, ProfessorFindUniqueArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Professor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfessorFindUniqueOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessorFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Professor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessorFindFirstArgs>(args?: SelectSubset<T, ProfessorFindFirstArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Professor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessorFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Professors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professors
     * const professors = await prisma.professor.findMany()
     * 
     * // Get first 10 Professors
     * const professors = await prisma.professor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professorWithIdOnly = await prisma.professor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessorFindManyArgs>(args?: SelectSubset<T, ProfessorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Professor.
     * @param {ProfessorCreateArgs} args - Arguments to create a Professor.
     * @example
     * // Create one Professor
     * const Professor = await prisma.professor.create({
     *   data: {
     *     // ... data to create a Professor
     *   }
     * })
     * 
     */
    create<T extends ProfessorCreateArgs>(args: SelectSubset<T, ProfessorCreateArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Professors.
     * @param {ProfessorCreateManyArgs} args - Arguments to create many Professors.
     * @example
     * // Create many Professors
     * const professor = await prisma.professor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessorCreateManyArgs>(args?: SelectSubset<T, ProfessorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Professors and returns the data saved in the database.
     * @param {ProfessorCreateManyAndReturnArgs} args - Arguments to create many Professors.
     * @example
     * // Create many Professors
     * const professor = await prisma.professor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Professors and only return the `id`
     * const professorWithIdOnly = await prisma.professor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessorCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Professor.
     * @param {ProfessorDeleteArgs} args - Arguments to delete one Professor.
     * @example
     * // Delete one Professor
     * const Professor = await prisma.professor.delete({
     *   where: {
     *     // ... filter to delete one Professor
     *   }
     * })
     * 
     */
    delete<T extends ProfessorDeleteArgs>(args: SelectSubset<T, ProfessorDeleteArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Professor.
     * @param {ProfessorUpdateArgs} args - Arguments to update one Professor.
     * @example
     * // Update one Professor
     * const professor = await prisma.professor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessorUpdateArgs>(args: SelectSubset<T, ProfessorUpdateArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Professors.
     * @param {ProfessorDeleteManyArgs} args - Arguments to filter Professors to delete.
     * @example
     * // Delete a few Professors
     * const { count } = await prisma.professor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessorDeleteManyArgs>(args?: SelectSubset<T, ProfessorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessorUpdateManyArgs>(args: SelectSubset<T, ProfessorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professor.
     * @param {ProfessorUpsertArgs} args - Arguments to update or create a Professor.
     * @example
     * // Update or create a Professor
     * const professor = await prisma.professor.upsert({
     *   create: {
     *     // ... data to create a Professor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor we want to update
     *   }
     * })
     */
    upsert<T extends ProfessorUpsertArgs>(args: SelectSubset<T, ProfessorUpsertArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorCountArgs} args - Arguments to filter Professors to count.
     * @example
     * // Count the number of Professors
     * const count = await prisma.professor.count({
     *   where: {
     *     // ... the filter for the Professors we want to count
     *   }
     * })
    **/
    count<T extends ProfessorCountArgs>(
      args?: Subset<T, ProfessorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorAggregateArgs>(args: Subset<T, ProfessorAggregateArgs>): Prisma.PrismaPromise<GetProfessorAggregateType<T>>

    /**
     * Group by Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessorGroupByArgs['orderBy'] }
        : { orderBy?: ProfessorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professor model
   */
  readonly fields: ProfessorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instituicao<T extends Professor$instituicaoArgs<ExtArgs> = {}>(args?: Subset<T, Professor$instituicaoArgs<ExtArgs>>): Prisma__InstituicaoClient<$Result.GetResult<Prisma.$InstituicaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends Professor$userArgs<ExtArgs> = {}>(args?: Subset<T, Professor$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    envios<T extends Professor$enviosArgs<ExtArgs> = {}>(args?: Subset<T, Professor$enviosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Professor model
   */ 
  interface ProfessorFieldRefs {
    readonly id: FieldRef<"Professor", 'String'>
    readonly nome: FieldRef<"Professor", 'String'>
    readonly cpf: FieldRef<"Professor", 'String'>
    readonly departamento: FieldRef<"Professor", 'String'>
    readonly saldoMoedas: FieldRef<"Professor", 'Int'>
    readonly lastAllocationAt: FieldRef<"Professor", 'DateTime'>
    readonly createdAt: FieldRef<"Professor", 'DateTime'>
    readonly instituicaoId: FieldRef<"Professor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Professor findUnique
   */
  export type ProfessorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor findUniqueOrThrow
   */
  export type ProfessorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor findFirst
   */
  export type ProfessorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor findFirstOrThrow
   */
  export type ProfessorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor findMany
   */
  export type ProfessorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professors to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor create
   */
  export type ProfessorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to create a Professor.
     */
    data: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
  }

  /**
   * Professor createMany
   */
  export type ProfessorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professors.
     */
    data: ProfessorCreateManyInput | ProfessorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Professor createManyAndReturn
   */
  export type ProfessorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Professors.
     */
    data: ProfessorCreateManyInput | ProfessorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Professor update
   */
  export type ProfessorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to update a Professor.
     */
    data: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
    /**
     * Choose, which Professor to update.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor updateMany
   */
  export type ProfessorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professors.
     */
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyInput>
    /**
     * Filter which Professors to update
     */
    where?: ProfessorWhereInput
  }

  /**
   * Professor upsert
   */
  export type ProfessorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The filter to search for the Professor to update in case it exists.
     */
    where: ProfessorWhereUniqueInput
    /**
     * In case the Professor found by the `where` argument doesn't exist, create a new Professor with this data.
     */
    create: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
    /**
     * In case the Professor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
  }

  /**
   * Professor delete
   */
  export type ProfessorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter which Professor to delete.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor deleteMany
   */
  export type ProfessorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professors to delete
     */
    where?: ProfessorWhereInput
  }

  /**
   * Professor.instituicao
   */
  export type Professor$instituicaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instituicao
     */
    select?: InstituicaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstituicaoInclude<ExtArgs> | null
    where?: InstituicaoWhereInput
  }

  /**
   * Professor.user
   */
  export type Professor$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Professor.envios
   */
  export type Professor$enviosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Professor without action
   */
  export type ProfessorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
  }


  /**
   * Model EmpresaParceira
   */

  export type AggregateEmpresaParceira = {
    _count: EmpresaParceiraCountAggregateOutputType | null
    _min: EmpresaParceiraMinAggregateOutputType | null
    _max: EmpresaParceiraMaxAggregateOutputType | null
  }

  export type EmpresaParceiraMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    cnpj: string | null
    endereco: string | null
    createdAt: Date | null
  }

  export type EmpresaParceiraMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    cnpj: string | null
    endereco: string | null
    createdAt: Date | null
  }

  export type EmpresaParceiraCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    cnpj: number
    endereco: number
    createdAt: number
    _all: number
  }


  export type EmpresaParceiraMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    cnpj?: true
    endereco?: true
    createdAt?: true
  }

  export type EmpresaParceiraMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    cnpj?: true
    endereco?: true
    createdAt?: true
  }

  export type EmpresaParceiraCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    cnpj?: true
    endereco?: true
    createdAt?: true
    _all?: true
  }

  export type EmpresaParceiraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmpresaParceira to aggregate.
     */
    where?: EmpresaParceiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmpresaParceiras to fetch.
     */
    orderBy?: EmpresaParceiraOrderByWithRelationInput | EmpresaParceiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmpresaParceiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmpresaParceiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmpresaParceiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmpresaParceiras
    **/
    _count?: true | EmpresaParceiraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmpresaParceiraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmpresaParceiraMaxAggregateInputType
  }

  export type GetEmpresaParceiraAggregateType<T extends EmpresaParceiraAggregateArgs> = {
        [P in keyof T & keyof AggregateEmpresaParceira]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmpresaParceira[P]>
      : GetScalarType<T[P], AggregateEmpresaParceira[P]>
  }




  export type EmpresaParceiraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmpresaParceiraWhereInput
    orderBy?: EmpresaParceiraOrderByWithAggregationInput | EmpresaParceiraOrderByWithAggregationInput[]
    by: EmpresaParceiraScalarFieldEnum[] | EmpresaParceiraScalarFieldEnum
    having?: EmpresaParceiraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmpresaParceiraCountAggregateInputType | true
    _min?: EmpresaParceiraMinAggregateInputType
    _max?: EmpresaParceiraMaxAggregateInputType
  }

  export type EmpresaParceiraGroupByOutputType = {
    id: string
    nome: string
    email: string
    cnpj: string
    endereco: string
    createdAt: Date
    _count: EmpresaParceiraCountAggregateOutputType | null
    _min: EmpresaParceiraMinAggregateOutputType | null
    _max: EmpresaParceiraMaxAggregateOutputType | null
  }

  type GetEmpresaParceiraGroupByPayload<T extends EmpresaParceiraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmpresaParceiraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmpresaParceiraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmpresaParceiraGroupByOutputType[P]>
            : GetScalarType<T[P], EmpresaParceiraGroupByOutputType[P]>
        }
      >
    >


  export type EmpresaParceiraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    cnpj?: boolean
    endereco?: boolean
    createdAt?: boolean
    vantagens?: boolean | EmpresaParceira$vantagensArgs<ExtArgs>
    user?: boolean | EmpresaParceira$userArgs<ExtArgs>
    _count?: boolean | EmpresaParceiraCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["empresaParceira"]>

  export type EmpresaParceiraSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    cnpj?: boolean
    endereco?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["empresaParceira"]>

  export type EmpresaParceiraSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    cnpj?: boolean
    endereco?: boolean
    createdAt?: boolean
  }

  export type EmpresaParceiraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vantagens?: boolean | EmpresaParceira$vantagensArgs<ExtArgs>
    user?: boolean | EmpresaParceira$userArgs<ExtArgs>
    _count?: boolean | EmpresaParceiraCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmpresaParceiraIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EmpresaParceiraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmpresaParceira"
    objects: {
      vantagens: Prisma.$VantagemPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      email: string
      cnpj: string
      endereco: string
      createdAt: Date
    }, ExtArgs["result"]["empresaParceira"]>
    composites: {}
  }

  type EmpresaParceiraGetPayload<S extends boolean | null | undefined | EmpresaParceiraDefaultArgs> = $Result.GetResult<Prisma.$EmpresaParceiraPayload, S>

  type EmpresaParceiraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmpresaParceiraFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmpresaParceiraCountAggregateInputType | true
    }

  export interface EmpresaParceiraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmpresaParceira'], meta: { name: 'EmpresaParceira' } }
    /**
     * Find zero or one EmpresaParceira that matches the filter.
     * @param {EmpresaParceiraFindUniqueArgs} args - Arguments to find a EmpresaParceira
     * @example
     * // Get one EmpresaParceira
     * const empresaParceira = await prisma.empresaParceira.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmpresaParceiraFindUniqueArgs>(args: SelectSubset<T, EmpresaParceiraFindUniqueArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmpresaParceira that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmpresaParceiraFindUniqueOrThrowArgs} args - Arguments to find a EmpresaParceira
     * @example
     * // Get one EmpresaParceira
     * const empresaParceira = await prisma.empresaParceira.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmpresaParceiraFindUniqueOrThrowArgs>(args: SelectSubset<T, EmpresaParceiraFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmpresaParceira that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaParceiraFindFirstArgs} args - Arguments to find a EmpresaParceira
     * @example
     * // Get one EmpresaParceira
     * const empresaParceira = await prisma.empresaParceira.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmpresaParceiraFindFirstArgs>(args?: SelectSubset<T, EmpresaParceiraFindFirstArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmpresaParceira that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaParceiraFindFirstOrThrowArgs} args - Arguments to find a EmpresaParceira
     * @example
     * // Get one EmpresaParceira
     * const empresaParceira = await prisma.empresaParceira.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmpresaParceiraFindFirstOrThrowArgs>(args?: SelectSubset<T, EmpresaParceiraFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmpresaParceiras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaParceiraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmpresaParceiras
     * const empresaParceiras = await prisma.empresaParceira.findMany()
     * 
     * // Get first 10 EmpresaParceiras
     * const empresaParceiras = await prisma.empresaParceira.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const empresaParceiraWithIdOnly = await prisma.empresaParceira.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmpresaParceiraFindManyArgs>(args?: SelectSubset<T, EmpresaParceiraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmpresaParceira.
     * @param {EmpresaParceiraCreateArgs} args - Arguments to create a EmpresaParceira.
     * @example
     * // Create one EmpresaParceira
     * const EmpresaParceira = await prisma.empresaParceira.create({
     *   data: {
     *     // ... data to create a EmpresaParceira
     *   }
     * })
     * 
     */
    create<T extends EmpresaParceiraCreateArgs>(args: SelectSubset<T, EmpresaParceiraCreateArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmpresaParceiras.
     * @param {EmpresaParceiraCreateManyArgs} args - Arguments to create many EmpresaParceiras.
     * @example
     * // Create many EmpresaParceiras
     * const empresaParceira = await prisma.empresaParceira.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmpresaParceiraCreateManyArgs>(args?: SelectSubset<T, EmpresaParceiraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmpresaParceiras and returns the data saved in the database.
     * @param {EmpresaParceiraCreateManyAndReturnArgs} args - Arguments to create many EmpresaParceiras.
     * @example
     * // Create many EmpresaParceiras
     * const empresaParceira = await prisma.empresaParceira.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmpresaParceiras and only return the `id`
     * const empresaParceiraWithIdOnly = await prisma.empresaParceira.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmpresaParceiraCreateManyAndReturnArgs>(args?: SelectSubset<T, EmpresaParceiraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EmpresaParceira.
     * @param {EmpresaParceiraDeleteArgs} args - Arguments to delete one EmpresaParceira.
     * @example
     * // Delete one EmpresaParceira
     * const EmpresaParceira = await prisma.empresaParceira.delete({
     *   where: {
     *     // ... filter to delete one EmpresaParceira
     *   }
     * })
     * 
     */
    delete<T extends EmpresaParceiraDeleteArgs>(args: SelectSubset<T, EmpresaParceiraDeleteArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmpresaParceira.
     * @param {EmpresaParceiraUpdateArgs} args - Arguments to update one EmpresaParceira.
     * @example
     * // Update one EmpresaParceira
     * const empresaParceira = await prisma.empresaParceira.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmpresaParceiraUpdateArgs>(args: SelectSubset<T, EmpresaParceiraUpdateArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmpresaParceiras.
     * @param {EmpresaParceiraDeleteManyArgs} args - Arguments to filter EmpresaParceiras to delete.
     * @example
     * // Delete a few EmpresaParceiras
     * const { count } = await prisma.empresaParceira.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmpresaParceiraDeleteManyArgs>(args?: SelectSubset<T, EmpresaParceiraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmpresaParceiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaParceiraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmpresaParceiras
     * const empresaParceira = await prisma.empresaParceira.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmpresaParceiraUpdateManyArgs>(args: SelectSubset<T, EmpresaParceiraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmpresaParceira.
     * @param {EmpresaParceiraUpsertArgs} args - Arguments to update or create a EmpresaParceira.
     * @example
     * // Update or create a EmpresaParceira
     * const empresaParceira = await prisma.empresaParceira.upsert({
     *   create: {
     *     // ... data to create a EmpresaParceira
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmpresaParceira we want to update
     *   }
     * })
     */
    upsert<T extends EmpresaParceiraUpsertArgs>(args: SelectSubset<T, EmpresaParceiraUpsertArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmpresaParceiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaParceiraCountArgs} args - Arguments to filter EmpresaParceiras to count.
     * @example
     * // Count the number of EmpresaParceiras
     * const count = await prisma.empresaParceira.count({
     *   where: {
     *     // ... the filter for the EmpresaParceiras we want to count
     *   }
     * })
    **/
    count<T extends EmpresaParceiraCountArgs>(
      args?: Subset<T, EmpresaParceiraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmpresaParceiraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmpresaParceira.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaParceiraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmpresaParceiraAggregateArgs>(args: Subset<T, EmpresaParceiraAggregateArgs>): Prisma.PrismaPromise<GetEmpresaParceiraAggregateType<T>>

    /**
     * Group by EmpresaParceira.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaParceiraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmpresaParceiraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmpresaParceiraGroupByArgs['orderBy'] }
        : { orderBy?: EmpresaParceiraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmpresaParceiraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpresaParceiraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmpresaParceira model
   */
  readonly fields: EmpresaParceiraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmpresaParceira.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmpresaParceiraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vantagens<T extends EmpresaParceira$vantagensArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaParceira$vantagensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends EmpresaParceira$userArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaParceira$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmpresaParceira model
   */ 
  interface EmpresaParceiraFieldRefs {
    readonly id: FieldRef<"EmpresaParceira", 'String'>
    readonly nome: FieldRef<"EmpresaParceira", 'String'>
    readonly email: FieldRef<"EmpresaParceira", 'String'>
    readonly cnpj: FieldRef<"EmpresaParceira", 'String'>
    readonly endereco: FieldRef<"EmpresaParceira", 'String'>
    readonly createdAt: FieldRef<"EmpresaParceira", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmpresaParceira findUnique
   */
  export type EmpresaParceiraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    /**
     * Filter, which EmpresaParceira to fetch.
     */
    where: EmpresaParceiraWhereUniqueInput
  }

  /**
   * EmpresaParceira findUniqueOrThrow
   */
  export type EmpresaParceiraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    /**
     * Filter, which EmpresaParceira to fetch.
     */
    where: EmpresaParceiraWhereUniqueInput
  }

  /**
   * EmpresaParceira findFirst
   */
  export type EmpresaParceiraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    /**
     * Filter, which EmpresaParceira to fetch.
     */
    where?: EmpresaParceiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmpresaParceiras to fetch.
     */
    orderBy?: EmpresaParceiraOrderByWithRelationInput | EmpresaParceiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmpresaParceiras.
     */
    cursor?: EmpresaParceiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmpresaParceiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmpresaParceiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmpresaParceiras.
     */
    distinct?: EmpresaParceiraScalarFieldEnum | EmpresaParceiraScalarFieldEnum[]
  }

  /**
   * EmpresaParceira findFirstOrThrow
   */
  export type EmpresaParceiraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    /**
     * Filter, which EmpresaParceira to fetch.
     */
    where?: EmpresaParceiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmpresaParceiras to fetch.
     */
    orderBy?: EmpresaParceiraOrderByWithRelationInput | EmpresaParceiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmpresaParceiras.
     */
    cursor?: EmpresaParceiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmpresaParceiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmpresaParceiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmpresaParceiras.
     */
    distinct?: EmpresaParceiraScalarFieldEnum | EmpresaParceiraScalarFieldEnum[]
  }

  /**
   * EmpresaParceira findMany
   */
  export type EmpresaParceiraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    /**
     * Filter, which EmpresaParceiras to fetch.
     */
    where?: EmpresaParceiraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmpresaParceiras to fetch.
     */
    orderBy?: EmpresaParceiraOrderByWithRelationInput | EmpresaParceiraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmpresaParceiras.
     */
    cursor?: EmpresaParceiraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmpresaParceiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmpresaParceiras.
     */
    skip?: number
    distinct?: EmpresaParceiraScalarFieldEnum | EmpresaParceiraScalarFieldEnum[]
  }

  /**
   * EmpresaParceira create
   */
  export type EmpresaParceiraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    /**
     * The data needed to create a EmpresaParceira.
     */
    data: XOR<EmpresaParceiraCreateInput, EmpresaParceiraUncheckedCreateInput>
  }

  /**
   * EmpresaParceira createMany
   */
  export type EmpresaParceiraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmpresaParceiras.
     */
    data: EmpresaParceiraCreateManyInput | EmpresaParceiraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmpresaParceira createManyAndReturn
   */
  export type EmpresaParceiraCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EmpresaParceiras.
     */
    data: EmpresaParceiraCreateManyInput | EmpresaParceiraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmpresaParceira update
   */
  export type EmpresaParceiraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    /**
     * The data needed to update a EmpresaParceira.
     */
    data: XOR<EmpresaParceiraUpdateInput, EmpresaParceiraUncheckedUpdateInput>
    /**
     * Choose, which EmpresaParceira to update.
     */
    where: EmpresaParceiraWhereUniqueInput
  }

  /**
   * EmpresaParceira updateMany
   */
  export type EmpresaParceiraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmpresaParceiras.
     */
    data: XOR<EmpresaParceiraUpdateManyMutationInput, EmpresaParceiraUncheckedUpdateManyInput>
    /**
     * Filter which EmpresaParceiras to update
     */
    where?: EmpresaParceiraWhereInput
  }

  /**
   * EmpresaParceira upsert
   */
  export type EmpresaParceiraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    /**
     * The filter to search for the EmpresaParceira to update in case it exists.
     */
    where: EmpresaParceiraWhereUniqueInput
    /**
     * In case the EmpresaParceira found by the `where` argument doesn't exist, create a new EmpresaParceira with this data.
     */
    create: XOR<EmpresaParceiraCreateInput, EmpresaParceiraUncheckedCreateInput>
    /**
     * In case the EmpresaParceira was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmpresaParceiraUpdateInput, EmpresaParceiraUncheckedUpdateInput>
  }

  /**
   * EmpresaParceira delete
   */
  export type EmpresaParceiraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
    /**
     * Filter which EmpresaParceira to delete.
     */
    where: EmpresaParceiraWhereUniqueInput
  }

  /**
   * EmpresaParceira deleteMany
   */
  export type EmpresaParceiraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmpresaParceiras to delete
     */
    where?: EmpresaParceiraWhereInput
  }

  /**
   * EmpresaParceira.vantagens
   */
  export type EmpresaParceira$vantagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    where?: VantagemWhereInput
    orderBy?: VantagemOrderByWithRelationInput | VantagemOrderByWithRelationInput[]
    cursor?: VantagemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VantagemScalarFieldEnum | VantagemScalarFieldEnum[]
  }

  /**
   * EmpresaParceira.user
   */
  export type EmpresaParceira$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * EmpresaParceira without action
   */
  export type EmpresaParceiraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaParceira
     */
    select?: EmpresaParceiraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaParceiraInclude<ExtArgs> | null
  }


  /**
   * Model Vantagem
   */

  export type AggregateVantagem = {
    _count: VantagemCountAggregateOutputType | null
    _avg: VantagemAvgAggregateOutputType | null
    _sum: VantagemSumAggregateOutputType | null
    _min: VantagemMinAggregateOutputType | null
    _max: VantagemMaxAggregateOutputType | null
  }

  export type VantagemAvgAggregateOutputType = {
    custoEmMoedas: number | null
  }

  export type VantagemSumAggregateOutputType = {
    custoEmMoedas: number | null
  }

  export type VantagemMinAggregateOutputType = {
    id: string | null
    titulo: string | null
    descricao: string | null
    custoEmMoedas: number | null
    fotoUrl: string | null
    createdAt: Date | null
    empresaParceiraId: string | null
  }

  export type VantagemMaxAggregateOutputType = {
    id: string | null
    titulo: string | null
    descricao: string | null
    custoEmMoedas: number | null
    fotoUrl: string | null
    createdAt: Date | null
    empresaParceiraId: string | null
  }

  export type VantagemCountAggregateOutputType = {
    id: number
    titulo: number
    descricao: number
    custoEmMoedas: number
    fotoUrl: number
    createdAt: number
    empresaParceiraId: number
    _all: number
  }


  export type VantagemAvgAggregateInputType = {
    custoEmMoedas?: true
  }

  export type VantagemSumAggregateInputType = {
    custoEmMoedas?: true
  }

  export type VantagemMinAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    custoEmMoedas?: true
    fotoUrl?: true
    createdAt?: true
    empresaParceiraId?: true
  }

  export type VantagemMaxAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    custoEmMoedas?: true
    fotoUrl?: true
    createdAt?: true
    empresaParceiraId?: true
  }

  export type VantagemCountAggregateInputType = {
    id?: true
    titulo?: true
    descricao?: true
    custoEmMoedas?: true
    fotoUrl?: true
    createdAt?: true
    empresaParceiraId?: true
    _all?: true
  }

  export type VantagemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vantagem to aggregate.
     */
    where?: VantagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vantagems to fetch.
     */
    orderBy?: VantagemOrderByWithRelationInput | VantagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VantagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vantagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vantagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vantagems
    **/
    _count?: true | VantagemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VantagemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VantagemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VantagemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VantagemMaxAggregateInputType
  }

  export type GetVantagemAggregateType<T extends VantagemAggregateArgs> = {
        [P in keyof T & keyof AggregateVantagem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVantagem[P]>
      : GetScalarType<T[P], AggregateVantagem[P]>
  }




  export type VantagemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VantagemWhereInput
    orderBy?: VantagemOrderByWithAggregationInput | VantagemOrderByWithAggregationInput[]
    by: VantagemScalarFieldEnum[] | VantagemScalarFieldEnum
    having?: VantagemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VantagemCountAggregateInputType | true
    _avg?: VantagemAvgAggregateInputType
    _sum?: VantagemSumAggregateInputType
    _min?: VantagemMinAggregateInputType
    _max?: VantagemMaxAggregateInputType
  }

  export type VantagemGroupByOutputType = {
    id: string
    titulo: string
    descricao: string
    custoEmMoedas: number
    fotoUrl: string | null
    createdAt: Date
    empresaParceiraId: string
    _count: VantagemCountAggregateOutputType | null
    _avg: VantagemAvgAggregateOutputType | null
    _sum: VantagemSumAggregateOutputType | null
    _min: VantagemMinAggregateOutputType | null
    _max: VantagemMaxAggregateOutputType | null
  }

  type GetVantagemGroupByPayload<T extends VantagemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VantagemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VantagemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VantagemGroupByOutputType[P]>
            : GetScalarType<T[P], VantagemGroupByOutputType[P]>
        }
      >
    >


  export type VantagemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    custoEmMoedas?: boolean
    fotoUrl?: boolean
    createdAt?: boolean
    empresaParceiraId?: boolean
    empresaParceira?: boolean | EmpresaParceiraDefaultArgs<ExtArgs>
    resgates?: boolean | Vantagem$resgatesArgs<ExtArgs>
    _count?: boolean | VantagemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vantagem"]>

  export type VantagemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    custoEmMoedas?: boolean
    fotoUrl?: boolean
    createdAt?: boolean
    empresaParceiraId?: boolean
    empresaParceira?: boolean | EmpresaParceiraDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vantagem"]>

  export type VantagemSelectScalar = {
    id?: boolean
    titulo?: boolean
    descricao?: boolean
    custoEmMoedas?: boolean
    fotoUrl?: boolean
    createdAt?: boolean
    empresaParceiraId?: boolean
  }

  export type VantagemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresaParceira?: boolean | EmpresaParceiraDefaultArgs<ExtArgs>
    resgates?: boolean | Vantagem$resgatesArgs<ExtArgs>
    _count?: boolean | VantagemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VantagemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresaParceira?: boolean | EmpresaParceiraDefaultArgs<ExtArgs>
  }

  export type $VantagemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vantagem"
    objects: {
      empresaParceira: Prisma.$EmpresaParceiraPayload<ExtArgs>
      resgates: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      titulo: string
      descricao: string
      custoEmMoedas: number
      fotoUrl: string | null
      createdAt: Date
      empresaParceiraId: string
    }, ExtArgs["result"]["vantagem"]>
    composites: {}
  }

  type VantagemGetPayload<S extends boolean | null | undefined | VantagemDefaultArgs> = $Result.GetResult<Prisma.$VantagemPayload, S>

  type VantagemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VantagemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VantagemCountAggregateInputType | true
    }

  export interface VantagemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vantagem'], meta: { name: 'Vantagem' } }
    /**
     * Find zero or one Vantagem that matches the filter.
     * @param {VantagemFindUniqueArgs} args - Arguments to find a Vantagem
     * @example
     * // Get one Vantagem
     * const vantagem = await prisma.vantagem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VantagemFindUniqueArgs>(args: SelectSubset<T, VantagemFindUniqueArgs<ExtArgs>>): Prisma__VantagemClient<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vantagem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VantagemFindUniqueOrThrowArgs} args - Arguments to find a Vantagem
     * @example
     * // Get one Vantagem
     * const vantagem = await prisma.vantagem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VantagemFindUniqueOrThrowArgs>(args: SelectSubset<T, VantagemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VantagemClient<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vantagem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VantagemFindFirstArgs} args - Arguments to find a Vantagem
     * @example
     * // Get one Vantagem
     * const vantagem = await prisma.vantagem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VantagemFindFirstArgs>(args?: SelectSubset<T, VantagemFindFirstArgs<ExtArgs>>): Prisma__VantagemClient<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vantagem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VantagemFindFirstOrThrowArgs} args - Arguments to find a Vantagem
     * @example
     * // Get one Vantagem
     * const vantagem = await prisma.vantagem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VantagemFindFirstOrThrowArgs>(args?: SelectSubset<T, VantagemFindFirstOrThrowArgs<ExtArgs>>): Prisma__VantagemClient<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vantagems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VantagemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vantagems
     * const vantagems = await prisma.vantagem.findMany()
     * 
     * // Get first 10 Vantagems
     * const vantagems = await prisma.vantagem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vantagemWithIdOnly = await prisma.vantagem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VantagemFindManyArgs>(args?: SelectSubset<T, VantagemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vantagem.
     * @param {VantagemCreateArgs} args - Arguments to create a Vantagem.
     * @example
     * // Create one Vantagem
     * const Vantagem = await prisma.vantagem.create({
     *   data: {
     *     // ... data to create a Vantagem
     *   }
     * })
     * 
     */
    create<T extends VantagemCreateArgs>(args: SelectSubset<T, VantagemCreateArgs<ExtArgs>>): Prisma__VantagemClient<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vantagems.
     * @param {VantagemCreateManyArgs} args - Arguments to create many Vantagems.
     * @example
     * // Create many Vantagems
     * const vantagem = await prisma.vantagem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VantagemCreateManyArgs>(args?: SelectSubset<T, VantagemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vantagems and returns the data saved in the database.
     * @param {VantagemCreateManyAndReturnArgs} args - Arguments to create many Vantagems.
     * @example
     * // Create many Vantagems
     * const vantagem = await prisma.vantagem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vantagems and only return the `id`
     * const vantagemWithIdOnly = await prisma.vantagem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VantagemCreateManyAndReturnArgs>(args?: SelectSubset<T, VantagemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Vantagem.
     * @param {VantagemDeleteArgs} args - Arguments to delete one Vantagem.
     * @example
     * // Delete one Vantagem
     * const Vantagem = await prisma.vantagem.delete({
     *   where: {
     *     // ... filter to delete one Vantagem
     *   }
     * })
     * 
     */
    delete<T extends VantagemDeleteArgs>(args: SelectSubset<T, VantagemDeleteArgs<ExtArgs>>): Prisma__VantagemClient<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vantagem.
     * @param {VantagemUpdateArgs} args - Arguments to update one Vantagem.
     * @example
     * // Update one Vantagem
     * const vantagem = await prisma.vantagem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VantagemUpdateArgs>(args: SelectSubset<T, VantagemUpdateArgs<ExtArgs>>): Prisma__VantagemClient<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vantagems.
     * @param {VantagemDeleteManyArgs} args - Arguments to filter Vantagems to delete.
     * @example
     * // Delete a few Vantagems
     * const { count } = await prisma.vantagem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VantagemDeleteManyArgs>(args?: SelectSubset<T, VantagemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vantagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VantagemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vantagems
     * const vantagem = await prisma.vantagem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VantagemUpdateManyArgs>(args: SelectSubset<T, VantagemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vantagem.
     * @param {VantagemUpsertArgs} args - Arguments to update or create a Vantagem.
     * @example
     * // Update or create a Vantagem
     * const vantagem = await prisma.vantagem.upsert({
     *   create: {
     *     // ... data to create a Vantagem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vantagem we want to update
     *   }
     * })
     */
    upsert<T extends VantagemUpsertArgs>(args: SelectSubset<T, VantagemUpsertArgs<ExtArgs>>): Prisma__VantagemClient<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vantagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VantagemCountArgs} args - Arguments to filter Vantagems to count.
     * @example
     * // Count the number of Vantagems
     * const count = await prisma.vantagem.count({
     *   where: {
     *     // ... the filter for the Vantagems we want to count
     *   }
     * })
    **/
    count<T extends VantagemCountArgs>(
      args?: Subset<T, VantagemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VantagemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vantagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VantagemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VantagemAggregateArgs>(args: Subset<T, VantagemAggregateArgs>): Prisma.PrismaPromise<GetVantagemAggregateType<T>>

    /**
     * Group by Vantagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VantagemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VantagemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VantagemGroupByArgs['orderBy'] }
        : { orderBy?: VantagemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VantagemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVantagemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vantagem model
   */
  readonly fields: VantagemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vantagem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VantagemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    empresaParceira<T extends EmpresaParceiraDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaParceiraDefaultArgs<ExtArgs>>): Prisma__EmpresaParceiraClient<$Result.GetResult<Prisma.$EmpresaParceiraPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    resgates<T extends Vantagem$resgatesArgs<ExtArgs> = {}>(args?: Subset<T, Vantagem$resgatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vantagem model
   */ 
  interface VantagemFieldRefs {
    readonly id: FieldRef<"Vantagem", 'String'>
    readonly titulo: FieldRef<"Vantagem", 'String'>
    readonly descricao: FieldRef<"Vantagem", 'String'>
    readonly custoEmMoedas: FieldRef<"Vantagem", 'Int'>
    readonly fotoUrl: FieldRef<"Vantagem", 'String'>
    readonly createdAt: FieldRef<"Vantagem", 'DateTime'>
    readonly empresaParceiraId: FieldRef<"Vantagem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Vantagem findUnique
   */
  export type VantagemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    /**
     * Filter, which Vantagem to fetch.
     */
    where: VantagemWhereUniqueInput
  }

  /**
   * Vantagem findUniqueOrThrow
   */
  export type VantagemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    /**
     * Filter, which Vantagem to fetch.
     */
    where: VantagemWhereUniqueInput
  }

  /**
   * Vantagem findFirst
   */
  export type VantagemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    /**
     * Filter, which Vantagem to fetch.
     */
    where?: VantagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vantagems to fetch.
     */
    orderBy?: VantagemOrderByWithRelationInput | VantagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vantagems.
     */
    cursor?: VantagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vantagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vantagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vantagems.
     */
    distinct?: VantagemScalarFieldEnum | VantagemScalarFieldEnum[]
  }

  /**
   * Vantagem findFirstOrThrow
   */
  export type VantagemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    /**
     * Filter, which Vantagem to fetch.
     */
    where?: VantagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vantagems to fetch.
     */
    orderBy?: VantagemOrderByWithRelationInput | VantagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vantagems.
     */
    cursor?: VantagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vantagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vantagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vantagems.
     */
    distinct?: VantagemScalarFieldEnum | VantagemScalarFieldEnum[]
  }

  /**
   * Vantagem findMany
   */
  export type VantagemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    /**
     * Filter, which Vantagems to fetch.
     */
    where?: VantagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vantagems to fetch.
     */
    orderBy?: VantagemOrderByWithRelationInput | VantagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vantagems.
     */
    cursor?: VantagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vantagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vantagems.
     */
    skip?: number
    distinct?: VantagemScalarFieldEnum | VantagemScalarFieldEnum[]
  }

  /**
   * Vantagem create
   */
  export type VantagemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    /**
     * The data needed to create a Vantagem.
     */
    data: XOR<VantagemCreateInput, VantagemUncheckedCreateInput>
  }

  /**
   * Vantagem createMany
   */
  export type VantagemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vantagems.
     */
    data: VantagemCreateManyInput | VantagemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vantagem createManyAndReturn
   */
  export type VantagemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Vantagems.
     */
    data: VantagemCreateManyInput | VantagemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vantagem update
   */
  export type VantagemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    /**
     * The data needed to update a Vantagem.
     */
    data: XOR<VantagemUpdateInput, VantagemUncheckedUpdateInput>
    /**
     * Choose, which Vantagem to update.
     */
    where: VantagemWhereUniqueInput
  }

  /**
   * Vantagem updateMany
   */
  export type VantagemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vantagems.
     */
    data: XOR<VantagemUpdateManyMutationInput, VantagemUncheckedUpdateManyInput>
    /**
     * Filter which Vantagems to update
     */
    where?: VantagemWhereInput
  }

  /**
   * Vantagem upsert
   */
  export type VantagemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    /**
     * The filter to search for the Vantagem to update in case it exists.
     */
    where: VantagemWhereUniqueInput
    /**
     * In case the Vantagem found by the `where` argument doesn't exist, create a new Vantagem with this data.
     */
    create: XOR<VantagemCreateInput, VantagemUncheckedCreateInput>
    /**
     * In case the Vantagem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VantagemUpdateInput, VantagemUncheckedUpdateInput>
  }

  /**
   * Vantagem delete
   */
  export type VantagemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    /**
     * Filter which Vantagem to delete.
     */
    where: VantagemWhereUniqueInput
  }

  /**
   * Vantagem deleteMany
   */
  export type VantagemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vantagems to delete
     */
    where?: VantagemWhereInput
  }

  /**
   * Vantagem.resgates
   */
  export type Vantagem$resgatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Vantagem without action
   */
  export type VantagemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    type: $Enums.TransactionType | null
    amount: number | null
    message: string | null
    couponCode: string | null
    createdAt: Date | null
    professorId: string | null
    alunoId: string | null
    vantagemId: string | null
    alunoResgateId: string | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    type: $Enums.TransactionType | null
    amount: number | null
    message: string | null
    couponCode: string | null
    createdAt: Date | null
    professorId: string | null
    alunoId: string | null
    vantagemId: string | null
    alunoResgateId: string | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    type: number
    amount: number
    message: number
    couponCode: number
    createdAt: number
    professorId: number
    alunoId: number
    vantagemId: number
    alunoResgateId: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    message?: true
    couponCode?: true
    createdAt?: true
    professorId?: true
    alunoId?: true
    vantagemId?: true
    alunoResgateId?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    message?: true
    couponCode?: true
    createdAt?: true
    professorId?: true
    alunoId?: true
    vantagemId?: true
    alunoResgateId?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    message?: true
    couponCode?: true
    createdAt?: true
    professorId?: true
    alunoId?: true
    vantagemId?: true
    alunoResgateId?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    type: $Enums.TransactionType
    amount: number
    message: string | null
    couponCode: string | null
    createdAt: Date
    professorId: string | null
    alunoId: string | null
    vantagemId: string | null
    alunoResgateId: string | null
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    message?: boolean
    couponCode?: boolean
    createdAt?: boolean
    professorId?: boolean
    alunoId?: boolean
    vantagemId?: boolean
    alunoResgateId?: boolean
    professor?: boolean | Transaction$professorArgs<ExtArgs>
    aluno?: boolean | Transaction$alunoArgs<ExtArgs>
    vantagem?: boolean | Transaction$vantagemArgs<ExtArgs>
    alunoResgate?: boolean | Transaction$alunoResgateArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    message?: boolean
    couponCode?: boolean
    createdAt?: boolean
    professorId?: boolean
    alunoId?: boolean
    vantagemId?: boolean
    alunoResgateId?: boolean
    professor?: boolean | Transaction$professorArgs<ExtArgs>
    aluno?: boolean | Transaction$alunoArgs<ExtArgs>
    vantagem?: boolean | Transaction$vantagemArgs<ExtArgs>
    alunoResgate?: boolean | Transaction$alunoResgateArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    type?: boolean
    amount?: boolean
    message?: boolean
    couponCode?: boolean
    createdAt?: boolean
    professorId?: boolean
    alunoId?: boolean
    vantagemId?: boolean
    alunoResgateId?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | Transaction$professorArgs<ExtArgs>
    aluno?: boolean | Transaction$alunoArgs<ExtArgs>
    vantagem?: boolean | Transaction$vantagemArgs<ExtArgs>
    alunoResgate?: boolean | Transaction$alunoResgateArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | Transaction$professorArgs<ExtArgs>
    aluno?: boolean | Transaction$alunoArgs<ExtArgs>
    vantagem?: boolean | Transaction$vantagemArgs<ExtArgs>
    alunoResgate?: boolean | Transaction$alunoResgateArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      professor: Prisma.$ProfessorPayload<ExtArgs> | null
      aluno: Prisma.$AlunoPayload<ExtArgs> | null
      vantagem: Prisma.$VantagemPayload<ExtArgs> | null
      alunoResgate: Prisma.$AlunoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.TransactionType
      amount: number
      message: string | null
      couponCode: string | null
      createdAt: Date
      professorId: string | null
      alunoId: string | null
      vantagemId: string | null
      alunoResgateId: string | null
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    professor<T extends Transaction$professorArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$professorArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    aluno<T extends Transaction$alunoArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$alunoArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    vantagem<T extends Transaction$vantagemArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$vantagemArgs<ExtArgs>>): Prisma__VantagemClient<$Result.GetResult<Prisma.$VantagemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    alunoResgate<T extends Transaction$alunoResgateArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$alunoResgateArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly type: FieldRef<"Transaction", 'TransactionType'>
    readonly amount: FieldRef<"Transaction", 'Int'>
    readonly message: FieldRef<"Transaction", 'String'>
    readonly couponCode: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly professorId: FieldRef<"Transaction", 'String'>
    readonly alunoId: FieldRef<"Transaction", 'String'>
    readonly vantagemId: FieldRef<"Transaction", 'String'>
    readonly alunoResgateId: FieldRef<"Transaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction.professor
   */
  export type Transaction$professorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    where?: ProfessorWhereInput
  }

  /**
   * Transaction.aluno
   */
  export type Transaction$alunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    where?: AlunoWhereInput
  }

  /**
   * Transaction.vantagem
   */
  export type Transaction$vantagemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vantagem
     */
    select?: VantagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VantagemInclude<ExtArgs> | null
    where?: VantagemWhereInput
  }

  /**
   * Transaction.alunoResgate
   */
  export type Transaction$alunoResgateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlunoInclude<ExtArgs> | null
    where?: AlunoWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    alunoId: 'alunoId',
    professorId: 'professorId',
    empresaId: 'empresaId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const InstituicaoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    endereco: 'endereco',
    createdAt: 'createdAt'
  };

  export type InstituicaoScalarFieldEnum = (typeof InstituicaoScalarFieldEnum)[keyof typeof InstituicaoScalarFieldEnum]


  export const AlunoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    cpf: 'cpf',
    rg: 'rg',
    endereco: 'endereco',
    curso: 'curso',
    saldoMoedas: 'saldoMoedas',
    createdAt: 'createdAt',
    instituicaoId: 'instituicaoId'
  };

  export type AlunoScalarFieldEnum = (typeof AlunoScalarFieldEnum)[keyof typeof AlunoScalarFieldEnum]


  export const ProfessorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cpf: 'cpf',
    departamento: 'departamento',
    saldoMoedas: 'saldoMoedas',
    lastAllocationAt: 'lastAllocationAt',
    createdAt: 'createdAt',
    instituicaoId: 'instituicaoId'
  };

  export type ProfessorScalarFieldEnum = (typeof ProfessorScalarFieldEnum)[keyof typeof ProfessorScalarFieldEnum]


  export const EmpresaParceiraScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    cnpj: 'cnpj',
    endereco: 'endereco',
    createdAt: 'createdAt'
  };

  export type EmpresaParceiraScalarFieldEnum = (typeof EmpresaParceiraScalarFieldEnum)[keyof typeof EmpresaParceiraScalarFieldEnum]


  export const VantagemScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    descricao: 'descricao',
    custoEmMoedas: 'custoEmMoedas',
    fotoUrl: 'fotoUrl',
    createdAt: 'createdAt',
    empresaParceiraId: 'empresaParceiraId'
  };

  export type VantagemScalarFieldEnum = (typeof VantagemScalarFieldEnum)[keyof typeof VantagemScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    amount: 'amount',
    message: 'message',
    couponCode: 'couponCode',
    createdAt: 'createdAt',
    professorId: 'professorId',
    alunoId: 'alunoId',
    vantagemId: 'vantagemId',
    alunoResgateId: 'alunoResgateId'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    alunoId?: StringNullableFilter<"User"> | string | null
    professorId?: StringNullableFilter<"User"> | string | null
    empresaId?: StringNullableFilter<"User"> | string | null
    aluno?: XOR<AlunoNullableRelationFilter, AlunoWhereInput> | null
    professor?: XOR<ProfessorNullableRelationFilter, ProfessorWhereInput> | null
    empresa?: XOR<EmpresaParceiraNullableRelationFilter, EmpresaParceiraWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    alunoId?: SortOrderInput | SortOrder
    professorId?: SortOrderInput | SortOrder
    empresaId?: SortOrderInput | SortOrder
    aluno?: AlunoOrderByWithRelationInput
    professor?: ProfessorOrderByWithRelationInput
    empresa?: EmpresaParceiraOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    alunoId?: StringNullableFilter<"User"> | string | null
    professorId?: StringNullableFilter<"User"> | string | null
    empresaId?: StringNullableFilter<"User"> | string | null
    aluno?: XOR<AlunoNullableRelationFilter, AlunoWhereInput> | null
    professor?: XOR<ProfessorNullableRelationFilter, ProfessorWhereInput> | null
    empresa?: XOR<EmpresaParceiraNullableRelationFilter, EmpresaParceiraWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    alunoId?: SortOrderInput | SortOrder
    professorId?: SortOrderInput | SortOrder
    empresaId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    alunoId?: StringNullableWithAggregatesFilter<"User"> | string | null
    professorId?: StringNullableWithAggregatesFilter<"User"> | string | null
    empresaId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type InstituicaoWhereInput = {
    AND?: InstituicaoWhereInput | InstituicaoWhereInput[]
    OR?: InstituicaoWhereInput[]
    NOT?: InstituicaoWhereInput | InstituicaoWhereInput[]
    id?: StringFilter<"Instituicao"> | string
    nome?: StringFilter<"Instituicao"> | string
    endereco?: StringFilter<"Instituicao"> | string
    createdAt?: DateTimeFilter<"Instituicao"> | Date | string
    alunos?: AlunoListRelationFilter
    professores?: ProfessorListRelationFilter
  }

  export type InstituicaoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
    alunos?: AlunoOrderByRelationAggregateInput
    professores?: ProfessorOrderByRelationAggregateInput
  }

  export type InstituicaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InstituicaoWhereInput | InstituicaoWhereInput[]
    OR?: InstituicaoWhereInput[]
    NOT?: InstituicaoWhereInput | InstituicaoWhereInput[]
    nome?: StringFilter<"Instituicao"> | string
    endereco?: StringFilter<"Instituicao"> | string
    createdAt?: DateTimeFilter<"Instituicao"> | Date | string
    alunos?: AlunoListRelationFilter
    professores?: ProfessorListRelationFilter
  }, "id">

  export type InstituicaoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
    _count?: InstituicaoCountOrderByAggregateInput
    _max?: InstituicaoMaxOrderByAggregateInput
    _min?: InstituicaoMinOrderByAggregateInput
  }

  export type InstituicaoScalarWhereWithAggregatesInput = {
    AND?: InstituicaoScalarWhereWithAggregatesInput | InstituicaoScalarWhereWithAggregatesInput[]
    OR?: InstituicaoScalarWhereWithAggregatesInput[]
    NOT?: InstituicaoScalarWhereWithAggregatesInput | InstituicaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Instituicao"> | string
    nome?: StringWithAggregatesFilter<"Instituicao"> | string
    endereco?: StringWithAggregatesFilter<"Instituicao"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Instituicao"> | Date | string
  }

  export type AlunoWhereInput = {
    AND?: AlunoWhereInput | AlunoWhereInput[]
    OR?: AlunoWhereInput[]
    NOT?: AlunoWhereInput | AlunoWhereInput[]
    id?: StringFilter<"Aluno"> | string
    nome?: StringFilter<"Aluno"> | string
    email?: StringFilter<"Aluno"> | string
    cpf?: StringFilter<"Aluno"> | string
    rg?: StringFilter<"Aluno"> | string
    endereco?: StringFilter<"Aluno"> | string
    curso?: StringFilter<"Aluno"> | string
    saldoMoedas?: IntFilter<"Aluno"> | number
    createdAt?: DateTimeFilter<"Aluno"> | Date | string
    instituicaoId?: StringNullableFilter<"Aluno"> | string | null
    instituicao?: XOR<InstituicaoNullableRelationFilter, InstituicaoWhereInput> | null
    user?: UserListRelationFilter
    recebimentos?: TransactionListRelationFilter
    resgates?: TransactionListRelationFilter
  }

  export type AlunoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    curso?: SortOrder
    saldoMoedas?: SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrderInput | SortOrder
    instituicao?: InstituicaoOrderByWithRelationInput
    user?: UserOrderByRelationAggregateInput
    recebimentos?: TransactionOrderByRelationAggregateInput
    resgates?: TransactionOrderByRelationAggregateInput
  }

  export type AlunoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    cpf?: string
    AND?: AlunoWhereInput | AlunoWhereInput[]
    OR?: AlunoWhereInput[]
    NOT?: AlunoWhereInput | AlunoWhereInput[]
    nome?: StringFilter<"Aluno"> | string
    rg?: StringFilter<"Aluno"> | string
    endereco?: StringFilter<"Aluno"> | string
    curso?: StringFilter<"Aluno"> | string
    saldoMoedas?: IntFilter<"Aluno"> | number
    createdAt?: DateTimeFilter<"Aluno"> | Date | string
    instituicaoId?: StringNullableFilter<"Aluno"> | string | null
    instituicao?: XOR<InstituicaoNullableRelationFilter, InstituicaoWhereInput> | null
    user?: UserListRelationFilter
    recebimentos?: TransactionListRelationFilter
    resgates?: TransactionListRelationFilter
  }, "id" | "email" | "cpf">

  export type AlunoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    curso?: SortOrder
    saldoMoedas?: SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrderInput | SortOrder
    _count?: AlunoCountOrderByAggregateInput
    _avg?: AlunoAvgOrderByAggregateInput
    _max?: AlunoMaxOrderByAggregateInput
    _min?: AlunoMinOrderByAggregateInput
    _sum?: AlunoSumOrderByAggregateInput
  }

  export type AlunoScalarWhereWithAggregatesInput = {
    AND?: AlunoScalarWhereWithAggregatesInput | AlunoScalarWhereWithAggregatesInput[]
    OR?: AlunoScalarWhereWithAggregatesInput[]
    NOT?: AlunoScalarWhereWithAggregatesInput | AlunoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Aluno"> | string
    nome?: StringWithAggregatesFilter<"Aluno"> | string
    email?: StringWithAggregatesFilter<"Aluno"> | string
    cpf?: StringWithAggregatesFilter<"Aluno"> | string
    rg?: StringWithAggregatesFilter<"Aluno"> | string
    endereco?: StringWithAggregatesFilter<"Aluno"> | string
    curso?: StringWithAggregatesFilter<"Aluno"> | string
    saldoMoedas?: IntWithAggregatesFilter<"Aluno"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Aluno"> | Date | string
    instituicaoId?: StringNullableWithAggregatesFilter<"Aluno"> | string | null
  }

  export type ProfessorWhereInput = {
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    id?: StringFilter<"Professor"> | string
    nome?: StringFilter<"Professor"> | string
    cpf?: StringFilter<"Professor"> | string
    departamento?: StringFilter<"Professor"> | string
    saldoMoedas?: IntFilter<"Professor"> | number
    lastAllocationAt?: DateTimeNullableFilter<"Professor"> | Date | string | null
    createdAt?: DateTimeFilter<"Professor"> | Date | string
    instituicaoId?: StringNullableFilter<"Professor"> | string | null
    instituicao?: XOR<InstituicaoNullableRelationFilter, InstituicaoWhereInput> | null
    user?: UserListRelationFilter
    envios?: TransactionListRelationFilter
  }

  export type ProfessorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    departamento?: SortOrder
    saldoMoedas?: SortOrder
    lastAllocationAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrderInput | SortOrder
    instituicao?: InstituicaoOrderByWithRelationInput
    user?: UserOrderByRelationAggregateInput
    envios?: TransactionOrderByRelationAggregateInput
  }

  export type ProfessorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cpf?: string
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    nome?: StringFilter<"Professor"> | string
    departamento?: StringFilter<"Professor"> | string
    saldoMoedas?: IntFilter<"Professor"> | number
    lastAllocationAt?: DateTimeNullableFilter<"Professor"> | Date | string | null
    createdAt?: DateTimeFilter<"Professor"> | Date | string
    instituicaoId?: StringNullableFilter<"Professor"> | string | null
    instituicao?: XOR<InstituicaoNullableRelationFilter, InstituicaoWhereInput> | null
    user?: UserListRelationFilter
    envios?: TransactionListRelationFilter
  }, "id" | "cpf">

  export type ProfessorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    departamento?: SortOrder
    saldoMoedas?: SortOrder
    lastAllocationAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrderInput | SortOrder
    _count?: ProfessorCountOrderByAggregateInput
    _avg?: ProfessorAvgOrderByAggregateInput
    _max?: ProfessorMaxOrderByAggregateInput
    _min?: ProfessorMinOrderByAggregateInput
    _sum?: ProfessorSumOrderByAggregateInput
  }

  export type ProfessorScalarWhereWithAggregatesInput = {
    AND?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    OR?: ProfessorScalarWhereWithAggregatesInput[]
    NOT?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Professor"> | string
    nome?: StringWithAggregatesFilter<"Professor"> | string
    cpf?: StringWithAggregatesFilter<"Professor"> | string
    departamento?: StringWithAggregatesFilter<"Professor"> | string
    saldoMoedas?: IntWithAggregatesFilter<"Professor"> | number
    lastAllocationAt?: DateTimeNullableWithAggregatesFilter<"Professor"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Professor"> | Date | string
    instituicaoId?: StringNullableWithAggregatesFilter<"Professor"> | string | null
  }

  export type EmpresaParceiraWhereInput = {
    AND?: EmpresaParceiraWhereInput | EmpresaParceiraWhereInput[]
    OR?: EmpresaParceiraWhereInput[]
    NOT?: EmpresaParceiraWhereInput | EmpresaParceiraWhereInput[]
    id?: StringFilter<"EmpresaParceira"> | string
    nome?: StringFilter<"EmpresaParceira"> | string
    email?: StringFilter<"EmpresaParceira"> | string
    cnpj?: StringFilter<"EmpresaParceira"> | string
    endereco?: StringFilter<"EmpresaParceira"> | string
    createdAt?: DateTimeFilter<"EmpresaParceira"> | Date | string
    vantagens?: VantagemListRelationFilter
    user?: UserListRelationFilter
  }

  export type EmpresaParceiraOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cnpj?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
    vantagens?: VantagemOrderByRelationAggregateInput
    user?: UserOrderByRelationAggregateInput
  }

  export type EmpresaParceiraWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    cnpj?: string
    AND?: EmpresaParceiraWhereInput | EmpresaParceiraWhereInput[]
    OR?: EmpresaParceiraWhereInput[]
    NOT?: EmpresaParceiraWhereInput | EmpresaParceiraWhereInput[]
    nome?: StringFilter<"EmpresaParceira"> | string
    endereco?: StringFilter<"EmpresaParceira"> | string
    createdAt?: DateTimeFilter<"EmpresaParceira"> | Date | string
    vantagens?: VantagemListRelationFilter
    user?: UserListRelationFilter
  }, "id" | "email" | "cnpj">

  export type EmpresaParceiraOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cnpj?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
    _count?: EmpresaParceiraCountOrderByAggregateInput
    _max?: EmpresaParceiraMaxOrderByAggregateInput
    _min?: EmpresaParceiraMinOrderByAggregateInput
  }

  export type EmpresaParceiraScalarWhereWithAggregatesInput = {
    AND?: EmpresaParceiraScalarWhereWithAggregatesInput | EmpresaParceiraScalarWhereWithAggregatesInput[]
    OR?: EmpresaParceiraScalarWhereWithAggregatesInput[]
    NOT?: EmpresaParceiraScalarWhereWithAggregatesInput | EmpresaParceiraScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmpresaParceira"> | string
    nome?: StringWithAggregatesFilter<"EmpresaParceira"> | string
    email?: StringWithAggregatesFilter<"EmpresaParceira"> | string
    cnpj?: StringWithAggregatesFilter<"EmpresaParceira"> | string
    endereco?: StringWithAggregatesFilter<"EmpresaParceira"> | string
    createdAt?: DateTimeWithAggregatesFilter<"EmpresaParceira"> | Date | string
  }

  export type VantagemWhereInput = {
    AND?: VantagemWhereInput | VantagemWhereInput[]
    OR?: VantagemWhereInput[]
    NOT?: VantagemWhereInput | VantagemWhereInput[]
    id?: StringFilter<"Vantagem"> | string
    titulo?: StringFilter<"Vantagem"> | string
    descricao?: StringFilter<"Vantagem"> | string
    custoEmMoedas?: IntFilter<"Vantagem"> | number
    fotoUrl?: StringNullableFilter<"Vantagem"> | string | null
    createdAt?: DateTimeFilter<"Vantagem"> | Date | string
    empresaParceiraId?: StringFilter<"Vantagem"> | string
    empresaParceira?: XOR<EmpresaParceiraRelationFilter, EmpresaParceiraWhereInput>
    resgates?: TransactionListRelationFilter
  }

  export type VantagemOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    custoEmMoedas?: SortOrder
    fotoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    empresaParceiraId?: SortOrder
    empresaParceira?: EmpresaParceiraOrderByWithRelationInput
    resgates?: TransactionOrderByRelationAggregateInput
  }

  export type VantagemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VantagemWhereInput | VantagemWhereInput[]
    OR?: VantagemWhereInput[]
    NOT?: VantagemWhereInput | VantagemWhereInput[]
    titulo?: StringFilter<"Vantagem"> | string
    descricao?: StringFilter<"Vantagem"> | string
    custoEmMoedas?: IntFilter<"Vantagem"> | number
    fotoUrl?: StringNullableFilter<"Vantagem"> | string | null
    createdAt?: DateTimeFilter<"Vantagem"> | Date | string
    empresaParceiraId?: StringFilter<"Vantagem"> | string
    empresaParceira?: XOR<EmpresaParceiraRelationFilter, EmpresaParceiraWhereInput>
    resgates?: TransactionListRelationFilter
  }, "id">

  export type VantagemOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    custoEmMoedas?: SortOrder
    fotoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    empresaParceiraId?: SortOrder
    _count?: VantagemCountOrderByAggregateInput
    _avg?: VantagemAvgOrderByAggregateInput
    _max?: VantagemMaxOrderByAggregateInput
    _min?: VantagemMinOrderByAggregateInput
    _sum?: VantagemSumOrderByAggregateInput
  }

  export type VantagemScalarWhereWithAggregatesInput = {
    AND?: VantagemScalarWhereWithAggregatesInput | VantagemScalarWhereWithAggregatesInput[]
    OR?: VantagemScalarWhereWithAggregatesInput[]
    NOT?: VantagemScalarWhereWithAggregatesInput | VantagemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vantagem"> | string
    titulo?: StringWithAggregatesFilter<"Vantagem"> | string
    descricao?: StringWithAggregatesFilter<"Vantagem"> | string
    custoEmMoedas?: IntWithAggregatesFilter<"Vantagem"> | number
    fotoUrl?: StringNullableWithAggregatesFilter<"Vantagem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Vantagem"> | Date | string
    empresaParceiraId?: StringWithAggregatesFilter<"Vantagem"> | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    amount?: IntFilter<"Transaction"> | number
    message?: StringNullableFilter<"Transaction"> | string | null
    couponCode?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    professorId?: StringNullableFilter<"Transaction"> | string | null
    alunoId?: StringNullableFilter<"Transaction"> | string | null
    vantagemId?: StringNullableFilter<"Transaction"> | string | null
    alunoResgateId?: StringNullableFilter<"Transaction"> | string | null
    professor?: XOR<ProfessorNullableRelationFilter, ProfessorWhereInput> | null
    aluno?: XOR<AlunoNullableRelationFilter, AlunoWhereInput> | null
    vantagem?: XOR<VantagemNullableRelationFilter, VantagemWhereInput> | null
    alunoResgate?: XOR<AlunoNullableRelationFilter, AlunoWhereInput> | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    message?: SortOrderInput | SortOrder
    couponCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    professorId?: SortOrderInput | SortOrder
    alunoId?: SortOrderInput | SortOrder
    vantagemId?: SortOrderInput | SortOrder
    alunoResgateId?: SortOrderInput | SortOrder
    professor?: ProfessorOrderByWithRelationInput
    aluno?: AlunoOrderByWithRelationInput
    vantagem?: VantagemOrderByWithRelationInput
    alunoResgate?: AlunoOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    amount?: IntFilter<"Transaction"> | number
    message?: StringNullableFilter<"Transaction"> | string | null
    couponCode?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    professorId?: StringNullableFilter<"Transaction"> | string | null
    alunoId?: StringNullableFilter<"Transaction"> | string | null
    vantagemId?: StringNullableFilter<"Transaction"> | string | null
    alunoResgateId?: StringNullableFilter<"Transaction"> | string | null
    professor?: XOR<ProfessorNullableRelationFilter, ProfessorWhereInput> | null
    aluno?: XOR<AlunoNullableRelationFilter, AlunoWhereInput> | null
    vantagem?: XOR<VantagemNullableRelationFilter, VantagemWhereInput> | null
    alunoResgate?: XOR<AlunoNullableRelationFilter, AlunoWhereInput> | null
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    message?: SortOrderInput | SortOrder
    couponCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    professorId?: SortOrderInput | SortOrder
    alunoId?: SortOrderInput | SortOrder
    vantagemId?: SortOrderInput | SortOrder
    alunoResgateId?: SortOrderInput | SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    type?: EnumTransactionTypeWithAggregatesFilter<"Transaction"> | $Enums.TransactionType
    amount?: IntWithAggregatesFilter<"Transaction"> | number
    message?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    couponCode?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    professorId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    alunoId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    vantagemId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    alunoResgateId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    aluno?: AlunoCreateNestedOneWithoutUserInput
    professor?: ProfessorCreateNestedOneWithoutUserInput
    empresa?: EmpresaParceiraCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    alunoId?: string | null
    professorId?: string | null
    empresaId?: string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aluno?: AlunoUpdateOneWithoutUserNestedInput
    professor?: ProfessorUpdateOneWithoutUserNestedInput
    empresa?: EmpresaParceiraUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    alunoId?: string | null
    professorId?: string | null
    empresaId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InstituicaoCreateInput = {
    id?: string
    nome: string
    endereco: string
    createdAt?: Date | string
    alunos?: AlunoCreateNestedManyWithoutInstituicaoInput
    professores?: ProfessorCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUncheckedCreateInput = {
    id?: string
    nome: string
    endereco: string
    createdAt?: Date | string
    alunos?: AlunoUncheckedCreateNestedManyWithoutInstituicaoInput
    professores?: ProfessorUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunos?: AlunoUpdateManyWithoutInstituicaoNestedInput
    professores?: ProfessorUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunos?: AlunoUncheckedUpdateManyWithoutInstituicaoNestedInput
    professores?: ProfessorUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoCreateManyInput = {
    id?: string
    nome: string
    endereco: string
    createdAt?: Date | string
  }

  export type InstituicaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstituicaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlunoCreateInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    instituicao?: InstituicaoCreateNestedOneWithoutAlunosInput
    user?: UserCreateNestedManyWithoutAlunoInput
    recebimentos?: TransactionCreateNestedManyWithoutAlunoInput
    resgates?: TransactionCreateNestedManyWithoutAlunoResgateInput
  }

  export type AlunoUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    instituicaoId?: string | null
    user?: UserUncheckedCreateNestedManyWithoutAlunoInput
    recebimentos?: TransactionUncheckedCreateNestedManyWithoutAlunoInput
    resgates?: TransactionUncheckedCreateNestedManyWithoutAlunoResgateInput
  }

  export type AlunoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao?: InstituicaoUpdateOneWithoutAlunosNestedInput
    user?: UserUpdateManyWithoutAlunoNestedInput
    recebimentos?: TransactionUpdateManyWithoutAlunoNestedInput
    resgates?: TransactionUpdateManyWithoutAlunoResgateNestedInput
  }

  export type AlunoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicaoId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUncheckedUpdateManyWithoutAlunoNestedInput
    recebimentos?: TransactionUncheckedUpdateManyWithoutAlunoNestedInput
    resgates?: TransactionUncheckedUpdateManyWithoutAlunoResgateNestedInput
  }

  export type AlunoCreateManyInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    instituicaoId?: string | null
  }

  export type AlunoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlunoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicaoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfessorCreateInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
    instituicao?: InstituicaoCreateNestedOneWithoutProfessoresInput
    user?: UserCreateNestedManyWithoutProfessorInput
    envios?: TransactionCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
    instituicaoId?: string | null
    user?: UserUncheckedCreateNestedManyWithoutProfessorInput
    envios?: TransactionUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao?: InstituicaoUpdateOneWithoutProfessoresNestedInput
    user?: UserUpdateManyWithoutProfessorNestedInput
    envios?: TransactionUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicaoId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUncheckedUpdateManyWithoutProfessorNestedInput
    envios?: TransactionUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorCreateManyInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
    instituicaoId?: string | null
  }

  export type ProfessorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicaoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmpresaParceiraCreateInput = {
    id?: string
    nome: string
    email: string
    cnpj: string
    endereco: string
    createdAt?: Date | string
    vantagens?: VantagemCreateNestedManyWithoutEmpresaParceiraInput
    user?: UserCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaParceiraUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    cnpj: string
    endereco: string
    createdAt?: Date | string
    vantagens?: VantagemUncheckedCreateNestedManyWithoutEmpresaParceiraInput
    user?: UserUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaParceiraUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vantagens?: VantagemUpdateManyWithoutEmpresaParceiraNestedInput
    user?: UserUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaParceiraUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vantagens?: VantagemUncheckedUpdateManyWithoutEmpresaParceiraNestedInput
    user?: UserUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaParceiraCreateManyInput = {
    id?: string
    nome: string
    email: string
    cnpj: string
    endereco: string
    createdAt?: Date | string
  }

  export type EmpresaParceiraUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaParceiraUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VantagemCreateInput = {
    id?: string
    titulo: string
    descricao: string
    custoEmMoedas: number
    fotoUrl?: string | null
    createdAt?: Date | string
    empresaParceira: EmpresaParceiraCreateNestedOneWithoutVantagensInput
    resgates?: TransactionCreateNestedManyWithoutVantagemInput
  }

  export type VantagemUncheckedCreateInput = {
    id?: string
    titulo: string
    descricao: string
    custoEmMoedas: number
    fotoUrl?: string | null
    createdAt?: Date | string
    empresaParceiraId: string
    resgates?: TransactionUncheckedCreateNestedManyWithoutVantagemInput
  }

  export type VantagemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    custoEmMoedas?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empresaParceira?: EmpresaParceiraUpdateOneRequiredWithoutVantagensNestedInput
    resgates?: TransactionUpdateManyWithoutVantagemNestedInput
  }

  export type VantagemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    custoEmMoedas?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empresaParceiraId?: StringFieldUpdateOperationsInput | string
    resgates?: TransactionUncheckedUpdateManyWithoutVantagemNestedInput
  }

  export type VantagemCreateManyInput = {
    id?: string
    titulo: string
    descricao: string
    custoEmMoedas: number
    fotoUrl?: string | null
    createdAt?: Date | string
    empresaParceiraId: string
  }

  export type VantagemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    custoEmMoedas?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VantagemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    custoEmMoedas?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empresaParceiraId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professor?: ProfessorCreateNestedOneWithoutEnviosInput
    aluno?: AlunoCreateNestedOneWithoutRecebimentosInput
    vantagem?: VantagemCreateNestedOneWithoutResgatesInput
    alunoResgate?: AlunoCreateNestedOneWithoutResgatesInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professorId?: string | null
    alunoId?: string | null
    vantagemId?: string | null
    alunoResgateId?: string | null
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUpdateOneWithoutEnviosNestedInput
    aluno?: AlunoUpdateOneWithoutRecebimentosNestedInput
    vantagem?: VantagemUpdateOneWithoutResgatesNestedInput
    alunoResgate?: AlunoUpdateOneWithoutResgatesNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    vantagemId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoResgateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionCreateManyInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professorId?: string | null
    alunoId?: string | null
    vantagemId?: string | null
    alunoResgateId?: string | null
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    vantagemId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoResgateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AlunoNullableRelationFilter = {
    is?: AlunoWhereInput | null
    isNot?: AlunoWhereInput | null
  }

  export type ProfessorNullableRelationFilter = {
    is?: ProfessorWhereInput | null
    isNot?: ProfessorWhereInput | null
  }

  export type EmpresaParceiraNullableRelationFilter = {
    is?: EmpresaParceiraWhereInput | null
    isNot?: EmpresaParceiraWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    alunoId?: SortOrder
    professorId?: SortOrder
    empresaId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    alunoId?: SortOrder
    professorId?: SortOrder
    empresaId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    alunoId?: SortOrder
    professorId?: SortOrder
    empresaId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type AlunoListRelationFilter = {
    every?: AlunoWhereInput
    some?: AlunoWhereInput
    none?: AlunoWhereInput
  }

  export type ProfessorListRelationFilter = {
    every?: ProfessorWhereInput
    some?: ProfessorWhereInput
    none?: ProfessorWhereInput
  }

  export type AlunoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstituicaoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
  }

  export type InstituicaoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
  }

  export type InstituicaoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type InstituicaoNullableRelationFilter = {
    is?: InstituicaoWhereInput | null
    isNot?: InstituicaoWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlunoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    curso?: SortOrder
    saldoMoedas?: SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrder
  }

  export type AlunoAvgOrderByAggregateInput = {
    saldoMoedas?: SortOrder
  }

  export type AlunoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    curso?: SortOrder
    saldoMoedas?: SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrder
  }

  export type AlunoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    endereco?: SortOrder
    curso?: SortOrder
    saldoMoedas?: SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrder
  }

  export type AlunoSumOrderByAggregateInput = {
    saldoMoedas?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProfessorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    departamento?: SortOrder
    saldoMoedas?: SortOrder
    lastAllocationAt?: SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrder
  }

  export type ProfessorAvgOrderByAggregateInput = {
    saldoMoedas?: SortOrder
  }

  export type ProfessorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    departamento?: SortOrder
    saldoMoedas?: SortOrder
    lastAllocationAt?: SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrder
  }

  export type ProfessorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cpf?: SortOrder
    departamento?: SortOrder
    saldoMoedas?: SortOrder
    lastAllocationAt?: SortOrder
    createdAt?: SortOrder
    instituicaoId?: SortOrder
  }

  export type ProfessorSumOrderByAggregateInput = {
    saldoMoedas?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VantagemListRelationFilter = {
    every?: VantagemWhereInput
    some?: VantagemWhereInput
    none?: VantagemWhereInput
  }

  export type VantagemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmpresaParceiraCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cnpj?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
  }

  export type EmpresaParceiraMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cnpj?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
  }

  export type EmpresaParceiraMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cnpj?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
  }

  export type EmpresaParceiraRelationFilter = {
    is?: EmpresaParceiraWhereInput
    isNot?: EmpresaParceiraWhereInput
  }

  export type VantagemCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    custoEmMoedas?: SortOrder
    fotoUrl?: SortOrder
    createdAt?: SortOrder
    empresaParceiraId?: SortOrder
  }

  export type VantagemAvgOrderByAggregateInput = {
    custoEmMoedas?: SortOrder
  }

  export type VantagemMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    custoEmMoedas?: SortOrder
    fotoUrl?: SortOrder
    createdAt?: SortOrder
    empresaParceiraId?: SortOrder
  }

  export type VantagemMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    custoEmMoedas?: SortOrder
    fotoUrl?: SortOrder
    createdAt?: SortOrder
    empresaParceiraId?: SortOrder
  }

  export type VantagemSumOrderByAggregateInput = {
    custoEmMoedas?: SortOrder
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type VantagemNullableRelationFilter = {
    is?: VantagemWhereInput | null
    isNot?: VantagemWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    message?: SortOrder
    couponCode?: SortOrder
    createdAt?: SortOrder
    professorId?: SortOrder
    alunoId?: SortOrder
    vantagemId?: SortOrder
    alunoResgateId?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    message?: SortOrder
    couponCode?: SortOrder
    createdAt?: SortOrder
    professorId?: SortOrder
    alunoId?: SortOrder
    vantagemId?: SortOrder
    alunoResgateId?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    message?: SortOrder
    couponCode?: SortOrder
    createdAt?: SortOrder
    professorId?: SortOrder
    alunoId?: SortOrder
    vantagemId?: SortOrder
    alunoResgateId?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type AlunoCreateNestedOneWithoutUserInput = {
    create?: XOR<AlunoCreateWithoutUserInput, AlunoUncheckedCreateWithoutUserInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutUserInput
    connect?: AlunoWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    connect?: ProfessorWhereUniqueInput
  }

  export type EmpresaParceiraCreateNestedOneWithoutUserInput = {
    create?: XOR<EmpresaParceiraCreateWithoutUserInput, EmpresaParceiraUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmpresaParceiraCreateOrConnectWithoutUserInput
    connect?: EmpresaParceiraWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AlunoUpdateOneWithoutUserNestedInput = {
    create?: XOR<AlunoCreateWithoutUserInput, AlunoUncheckedCreateWithoutUserInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutUserInput
    upsert?: AlunoUpsertWithoutUserInput
    disconnect?: AlunoWhereInput | boolean
    delete?: AlunoWhereInput | boolean
    connect?: AlunoWhereUniqueInput
    update?: XOR<XOR<AlunoUpdateToOneWithWhereWithoutUserInput, AlunoUpdateWithoutUserInput>, AlunoUncheckedUpdateWithoutUserInput>
  }

  export type ProfessorUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    upsert?: ProfessorUpsertWithoutUserInput
    disconnect?: ProfessorWhereInput | boolean
    delete?: ProfessorWhereInput | boolean
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutUserInput, ProfessorUpdateWithoutUserInput>, ProfessorUncheckedUpdateWithoutUserInput>
  }

  export type EmpresaParceiraUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmpresaParceiraCreateWithoutUserInput, EmpresaParceiraUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmpresaParceiraCreateOrConnectWithoutUserInput
    upsert?: EmpresaParceiraUpsertWithoutUserInput
    disconnect?: EmpresaParceiraWhereInput | boolean
    delete?: EmpresaParceiraWhereInput | boolean
    connect?: EmpresaParceiraWhereUniqueInput
    update?: XOR<XOR<EmpresaParceiraUpdateToOneWithWhereWithoutUserInput, EmpresaParceiraUpdateWithoutUserInput>, EmpresaParceiraUncheckedUpdateWithoutUserInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AlunoCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<AlunoCreateWithoutInstituicaoInput, AlunoUncheckedCreateWithoutInstituicaoInput> | AlunoCreateWithoutInstituicaoInput[] | AlunoUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: AlunoCreateOrConnectWithoutInstituicaoInput | AlunoCreateOrConnectWithoutInstituicaoInput[]
    createMany?: AlunoCreateManyInstituicaoInputEnvelope
    connect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
  }

  export type ProfessorCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<ProfessorCreateWithoutInstituicaoInput, ProfessorUncheckedCreateWithoutInstituicaoInput> | ProfessorCreateWithoutInstituicaoInput[] | ProfessorUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: ProfessorCreateOrConnectWithoutInstituicaoInput | ProfessorCreateOrConnectWithoutInstituicaoInput[]
    createMany?: ProfessorCreateManyInstituicaoInputEnvelope
    connect?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
  }

  export type AlunoUncheckedCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<AlunoCreateWithoutInstituicaoInput, AlunoUncheckedCreateWithoutInstituicaoInput> | AlunoCreateWithoutInstituicaoInput[] | AlunoUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: AlunoCreateOrConnectWithoutInstituicaoInput | AlunoCreateOrConnectWithoutInstituicaoInput[]
    createMany?: AlunoCreateManyInstituicaoInputEnvelope
    connect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
  }

  export type ProfessorUncheckedCreateNestedManyWithoutInstituicaoInput = {
    create?: XOR<ProfessorCreateWithoutInstituicaoInput, ProfessorUncheckedCreateWithoutInstituicaoInput> | ProfessorCreateWithoutInstituicaoInput[] | ProfessorUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: ProfessorCreateOrConnectWithoutInstituicaoInput | ProfessorCreateOrConnectWithoutInstituicaoInput[]
    createMany?: ProfessorCreateManyInstituicaoInputEnvelope
    connect?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
  }

  export type AlunoUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<AlunoCreateWithoutInstituicaoInput, AlunoUncheckedCreateWithoutInstituicaoInput> | AlunoCreateWithoutInstituicaoInput[] | AlunoUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: AlunoCreateOrConnectWithoutInstituicaoInput | AlunoCreateOrConnectWithoutInstituicaoInput[]
    upsert?: AlunoUpsertWithWhereUniqueWithoutInstituicaoInput | AlunoUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: AlunoCreateManyInstituicaoInputEnvelope
    set?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    disconnect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    delete?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    connect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    update?: AlunoUpdateWithWhereUniqueWithoutInstituicaoInput | AlunoUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: AlunoUpdateManyWithWhereWithoutInstituicaoInput | AlunoUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: AlunoScalarWhereInput | AlunoScalarWhereInput[]
  }

  export type ProfessorUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<ProfessorCreateWithoutInstituicaoInput, ProfessorUncheckedCreateWithoutInstituicaoInput> | ProfessorCreateWithoutInstituicaoInput[] | ProfessorUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: ProfessorCreateOrConnectWithoutInstituicaoInput | ProfessorCreateOrConnectWithoutInstituicaoInput[]
    upsert?: ProfessorUpsertWithWhereUniqueWithoutInstituicaoInput | ProfessorUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: ProfessorCreateManyInstituicaoInputEnvelope
    set?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
    disconnect?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
    delete?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
    connect?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
    update?: ProfessorUpdateWithWhereUniqueWithoutInstituicaoInput | ProfessorUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: ProfessorUpdateManyWithWhereWithoutInstituicaoInput | ProfessorUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: ProfessorScalarWhereInput | ProfessorScalarWhereInput[]
  }

  export type AlunoUncheckedUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<AlunoCreateWithoutInstituicaoInput, AlunoUncheckedCreateWithoutInstituicaoInput> | AlunoCreateWithoutInstituicaoInput[] | AlunoUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: AlunoCreateOrConnectWithoutInstituicaoInput | AlunoCreateOrConnectWithoutInstituicaoInput[]
    upsert?: AlunoUpsertWithWhereUniqueWithoutInstituicaoInput | AlunoUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: AlunoCreateManyInstituicaoInputEnvelope
    set?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    disconnect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    delete?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    connect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    update?: AlunoUpdateWithWhereUniqueWithoutInstituicaoInput | AlunoUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: AlunoUpdateManyWithWhereWithoutInstituicaoInput | AlunoUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: AlunoScalarWhereInput | AlunoScalarWhereInput[]
  }

  export type ProfessorUncheckedUpdateManyWithoutInstituicaoNestedInput = {
    create?: XOR<ProfessorCreateWithoutInstituicaoInput, ProfessorUncheckedCreateWithoutInstituicaoInput> | ProfessorCreateWithoutInstituicaoInput[] | ProfessorUncheckedCreateWithoutInstituicaoInput[]
    connectOrCreate?: ProfessorCreateOrConnectWithoutInstituicaoInput | ProfessorCreateOrConnectWithoutInstituicaoInput[]
    upsert?: ProfessorUpsertWithWhereUniqueWithoutInstituicaoInput | ProfessorUpsertWithWhereUniqueWithoutInstituicaoInput[]
    createMany?: ProfessorCreateManyInstituicaoInputEnvelope
    set?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
    disconnect?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
    delete?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
    connect?: ProfessorWhereUniqueInput | ProfessorWhereUniqueInput[]
    update?: ProfessorUpdateWithWhereUniqueWithoutInstituicaoInput | ProfessorUpdateWithWhereUniqueWithoutInstituicaoInput[]
    updateMany?: ProfessorUpdateManyWithWhereWithoutInstituicaoInput | ProfessorUpdateManyWithWhereWithoutInstituicaoInput[]
    deleteMany?: ProfessorScalarWhereInput | ProfessorScalarWhereInput[]
  }

  export type InstituicaoCreateNestedOneWithoutAlunosInput = {
    create?: XOR<InstituicaoCreateWithoutAlunosInput, InstituicaoUncheckedCreateWithoutAlunosInput>
    connectOrCreate?: InstituicaoCreateOrConnectWithoutAlunosInput
    connect?: InstituicaoWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutAlunoInput = {
    create?: XOR<UserCreateWithoutAlunoInput, UserUncheckedCreateWithoutAlunoInput> | UserCreateWithoutAlunoInput[] | UserUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAlunoInput | UserCreateOrConnectWithoutAlunoInput[]
    createMany?: UserCreateManyAlunoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutAlunoInput = {
    create?: XOR<TransactionCreateWithoutAlunoInput, TransactionUncheckedCreateWithoutAlunoInput> | TransactionCreateWithoutAlunoInput[] | TransactionUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutAlunoInput | TransactionCreateOrConnectWithoutAlunoInput[]
    createMany?: TransactionCreateManyAlunoInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutAlunoResgateInput = {
    create?: XOR<TransactionCreateWithoutAlunoResgateInput, TransactionUncheckedCreateWithoutAlunoResgateInput> | TransactionCreateWithoutAlunoResgateInput[] | TransactionUncheckedCreateWithoutAlunoResgateInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutAlunoResgateInput | TransactionCreateOrConnectWithoutAlunoResgateInput[]
    createMany?: TransactionCreateManyAlunoResgateInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAlunoInput = {
    create?: XOR<UserCreateWithoutAlunoInput, UserUncheckedCreateWithoutAlunoInput> | UserCreateWithoutAlunoInput[] | UserUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAlunoInput | UserCreateOrConnectWithoutAlunoInput[]
    createMany?: UserCreateManyAlunoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutAlunoInput = {
    create?: XOR<TransactionCreateWithoutAlunoInput, TransactionUncheckedCreateWithoutAlunoInput> | TransactionCreateWithoutAlunoInput[] | TransactionUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutAlunoInput | TransactionCreateOrConnectWithoutAlunoInput[]
    createMany?: TransactionCreateManyAlunoInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutAlunoResgateInput = {
    create?: XOR<TransactionCreateWithoutAlunoResgateInput, TransactionUncheckedCreateWithoutAlunoResgateInput> | TransactionCreateWithoutAlunoResgateInput[] | TransactionUncheckedCreateWithoutAlunoResgateInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutAlunoResgateInput | TransactionCreateOrConnectWithoutAlunoResgateInput[]
    createMany?: TransactionCreateManyAlunoResgateInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InstituicaoUpdateOneWithoutAlunosNestedInput = {
    create?: XOR<InstituicaoCreateWithoutAlunosInput, InstituicaoUncheckedCreateWithoutAlunosInput>
    connectOrCreate?: InstituicaoCreateOrConnectWithoutAlunosInput
    upsert?: InstituicaoUpsertWithoutAlunosInput
    disconnect?: InstituicaoWhereInput | boolean
    delete?: InstituicaoWhereInput | boolean
    connect?: InstituicaoWhereUniqueInput
    update?: XOR<XOR<InstituicaoUpdateToOneWithWhereWithoutAlunosInput, InstituicaoUpdateWithoutAlunosInput>, InstituicaoUncheckedUpdateWithoutAlunosInput>
  }

  export type UserUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<UserCreateWithoutAlunoInput, UserUncheckedCreateWithoutAlunoInput> | UserCreateWithoutAlunoInput[] | UserUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAlunoInput | UserCreateOrConnectWithoutAlunoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAlunoInput | UserUpsertWithWhereUniqueWithoutAlunoInput[]
    createMany?: UserCreateManyAlunoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAlunoInput | UserUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAlunoInput | UserUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<TransactionCreateWithoutAlunoInput, TransactionUncheckedCreateWithoutAlunoInput> | TransactionCreateWithoutAlunoInput[] | TransactionUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutAlunoInput | TransactionCreateOrConnectWithoutAlunoInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutAlunoInput | TransactionUpsertWithWhereUniqueWithoutAlunoInput[]
    createMany?: TransactionCreateManyAlunoInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutAlunoInput | TransactionUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutAlunoInput | TransactionUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutAlunoResgateNestedInput = {
    create?: XOR<TransactionCreateWithoutAlunoResgateInput, TransactionUncheckedCreateWithoutAlunoResgateInput> | TransactionCreateWithoutAlunoResgateInput[] | TransactionUncheckedCreateWithoutAlunoResgateInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutAlunoResgateInput | TransactionCreateOrConnectWithoutAlunoResgateInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutAlunoResgateInput | TransactionUpsertWithWhereUniqueWithoutAlunoResgateInput[]
    createMany?: TransactionCreateManyAlunoResgateInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutAlunoResgateInput | TransactionUpdateWithWhereUniqueWithoutAlunoResgateInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutAlunoResgateInput | TransactionUpdateManyWithWhereWithoutAlunoResgateInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<UserCreateWithoutAlunoInput, UserUncheckedCreateWithoutAlunoInput> | UserCreateWithoutAlunoInput[] | UserUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAlunoInput | UserCreateOrConnectWithoutAlunoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAlunoInput | UserUpsertWithWhereUniqueWithoutAlunoInput[]
    createMany?: UserCreateManyAlunoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAlunoInput | UserUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAlunoInput | UserUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<TransactionCreateWithoutAlunoInput, TransactionUncheckedCreateWithoutAlunoInput> | TransactionCreateWithoutAlunoInput[] | TransactionUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutAlunoInput | TransactionCreateOrConnectWithoutAlunoInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutAlunoInput | TransactionUpsertWithWhereUniqueWithoutAlunoInput[]
    createMany?: TransactionCreateManyAlunoInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutAlunoInput | TransactionUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutAlunoInput | TransactionUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutAlunoResgateNestedInput = {
    create?: XOR<TransactionCreateWithoutAlunoResgateInput, TransactionUncheckedCreateWithoutAlunoResgateInput> | TransactionCreateWithoutAlunoResgateInput[] | TransactionUncheckedCreateWithoutAlunoResgateInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutAlunoResgateInput | TransactionCreateOrConnectWithoutAlunoResgateInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutAlunoResgateInput | TransactionUpsertWithWhereUniqueWithoutAlunoResgateInput[]
    createMany?: TransactionCreateManyAlunoResgateInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutAlunoResgateInput | TransactionUpdateWithWhereUniqueWithoutAlunoResgateInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutAlunoResgateInput | TransactionUpdateManyWithWhereWithoutAlunoResgateInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type InstituicaoCreateNestedOneWithoutProfessoresInput = {
    create?: XOR<InstituicaoCreateWithoutProfessoresInput, InstituicaoUncheckedCreateWithoutProfessoresInput>
    connectOrCreate?: InstituicaoCreateOrConnectWithoutProfessoresInput
    connect?: InstituicaoWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutProfessorInput = {
    create?: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput> | UserCreateWithoutProfessorInput[] | UserUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfessorInput | UserCreateOrConnectWithoutProfessorInput[]
    createMany?: UserCreateManyProfessorInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutProfessorInput = {
    create?: XOR<TransactionCreateWithoutProfessorInput, TransactionUncheckedCreateWithoutProfessorInput> | TransactionCreateWithoutProfessorInput[] | TransactionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutProfessorInput | TransactionCreateOrConnectWithoutProfessorInput[]
    createMany?: TransactionCreateManyProfessorInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput> | UserCreateWithoutProfessorInput[] | UserUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfessorInput | UserCreateOrConnectWithoutProfessorInput[]
    createMany?: UserCreateManyProfessorInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<TransactionCreateWithoutProfessorInput, TransactionUncheckedCreateWithoutProfessorInput> | TransactionCreateWithoutProfessorInput[] | TransactionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutProfessorInput | TransactionCreateOrConnectWithoutProfessorInput[]
    createMany?: TransactionCreateManyProfessorInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type InstituicaoUpdateOneWithoutProfessoresNestedInput = {
    create?: XOR<InstituicaoCreateWithoutProfessoresInput, InstituicaoUncheckedCreateWithoutProfessoresInput>
    connectOrCreate?: InstituicaoCreateOrConnectWithoutProfessoresInput
    upsert?: InstituicaoUpsertWithoutProfessoresInput
    disconnect?: InstituicaoWhereInput | boolean
    delete?: InstituicaoWhereInput | boolean
    connect?: InstituicaoWhereUniqueInput
    update?: XOR<XOR<InstituicaoUpdateToOneWithWhereWithoutProfessoresInput, InstituicaoUpdateWithoutProfessoresInput>, InstituicaoUncheckedUpdateWithoutProfessoresInput>
  }

  export type UserUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput> | UserCreateWithoutProfessorInput[] | UserUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfessorInput | UserCreateOrConnectWithoutProfessorInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfessorInput | UserUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: UserCreateManyProfessorInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfessorInput | UserUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfessorInput | UserUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<TransactionCreateWithoutProfessorInput, TransactionUncheckedCreateWithoutProfessorInput> | TransactionCreateWithoutProfessorInput[] | TransactionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutProfessorInput | TransactionCreateOrConnectWithoutProfessorInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutProfessorInput | TransactionUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: TransactionCreateManyProfessorInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutProfessorInput | TransactionUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutProfessorInput | TransactionUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput> | UserCreateWithoutProfessorInput[] | UserUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfessorInput | UserCreateOrConnectWithoutProfessorInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfessorInput | UserUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: UserCreateManyProfessorInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfessorInput | UserUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfessorInput | UserUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<TransactionCreateWithoutProfessorInput, TransactionUncheckedCreateWithoutProfessorInput> | TransactionCreateWithoutProfessorInput[] | TransactionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutProfessorInput | TransactionCreateOrConnectWithoutProfessorInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutProfessorInput | TransactionUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: TransactionCreateManyProfessorInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutProfessorInput | TransactionUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutProfessorInput | TransactionUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type VantagemCreateNestedManyWithoutEmpresaParceiraInput = {
    create?: XOR<VantagemCreateWithoutEmpresaParceiraInput, VantagemUncheckedCreateWithoutEmpresaParceiraInput> | VantagemCreateWithoutEmpresaParceiraInput[] | VantagemUncheckedCreateWithoutEmpresaParceiraInput[]
    connectOrCreate?: VantagemCreateOrConnectWithoutEmpresaParceiraInput | VantagemCreateOrConnectWithoutEmpresaParceiraInput[]
    createMany?: VantagemCreateManyEmpresaParceiraInputEnvelope
    connect?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<UserCreateWithoutEmpresaInput, UserUncheckedCreateWithoutEmpresaInput> | UserCreateWithoutEmpresaInput[] | UserUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEmpresaInput | UserCreateOrConnectWithoutEmpresaInput[]
    createMany?: UserCreateManyEmpresaInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type VantagemUncheckedCreateNestedManyWithoutEmpresaParceiraInput = {
    create?: XOR<VantagemCreateWithoutEmpresaParceiraInput, VantagemUncheckedCreateWithoutEmpresaParceiraInput> | VantagemCreateWithoutEmpresaParceiraInput[] | VantagemUncheckedCreateWithoutEmpresaParceiraInput[]
    connectOrCreate?: VantagemCreateOrConnectWithoutEmpresaParceiraInput | VantagemCreateOrConnectWithoutEmpresaParceiraInput[]
    createMany?: VantagemCreateManyEmpresaParceiraInputEnvelope
    connect?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<UserCreateWithoutEmpresaInput, UserUncheckedCreateWithoutEmpresaInput> | UserCreateWithoutEmpresaInput[] | UserUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEmpresaInput | UserCreateOrConnectWithoutEmpresaInput[]
    createMany?: UserCreateManyEmpresaInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type VantagemUpdateManyWithoutEmpresaParceiraNestedInput = {
    create?: XOR<VantagemCreateWithoutEmpresaParceiraInput, VantagemUncheckedCreateWithoutEmpresaParceiraInput> | VantagemCreateWithoutEmpresaParceiraInput[] | VantagemUncheckedCreateWithoutEmpresaParceiraInput[]
    connectOrCreate?: VantagemCreateOrConnectWithoutEmpresaParceiraInput | VantagemCreateOrConnectWithoutEmpresaParceiraInput[]
    upsert?: VantagemUpsertWithWhereUniqueWithoutEmpresaParceiraInput | VantagemUpsertWithWhereUniqueWithoutEmpresaParceiraInput[]
    createMany?: VantagemCreateManyEmpresaParceiraInputEnvelope
    set?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
    disconnect?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
    delete?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
    connect?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
    update?: VantagemUpdateWithWhereUniqueWithoutEmpresaParceiraInput | VantagemUpdateWithWhereUniqueWithoutEmpresaParceiraInput[]
    updateMany?: VantagemUpdateManyWithWhereWithoutEmpresaParceiraInput | VantagemUpdateManyWithWhereWithoutEmpresaParceiraInput[]
    deleteMany?: VantagemScalarWhereInput | VantagemScalarWhereInput[]
  }

  export type UserUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<UserCreateWithoutEmpresaInput, UserUncheckedCreateWithoutEmpresaInput> | UserCreateWithoutEmpresaInput[] | UserUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEmpresaInput | UserCreateOrConnectWithoutEmpresaInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutEmpresaInput | UserUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: UserCreateManyEmpresaInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutEmpresaInput | UserUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: UserUpdateManyWithWhereWithoutEmpresaInput | UserUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type VantagemUncheckedUpdateManyWithoutEmpresaParceiraNestedInput = {
    create?: XOR<VantagemCreateWithoutEmpresaParceiraInput, VantagemUncheckedCreateWithoutEmpresaParceiraInput> | VantagemCreateWithoutEmpresaParceiraInput[] | VantagemUncheckedCreateWithoutEmpresaParceiraInput[]
    connectOrCreate?: VantagemCreateOrConnectWithoutEmpresaParceiraInput | VantagemCreateOrConnectWithoutEmpresaParceiraInput[]
    upsert?: VantagemUpsertWithWhereUniqueWithoutEmpresaParceiraInput | VantagemUpsertWithWhereUniqueWithoutEmpresaParceiraInput[]
    createMany?: VantagemCreateManyEmpresaParceiraInputEnvelope
    set?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
    disconnect?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
    delete?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
    connect?: VantagemWhereUniqueInput | VantagemWhereUniqueInput[]
    update?: VantagemUpdateWithWhereUniqueWithoutEmpresaParceiraInput | VantagemUpdateWithWhereUniqueWithoutEmpresaParceiraInput[]
    updateMany?: VantagemUpdateManyWithWhereWithoutEmpresaParceiraInput | VantagemUpdateManyWithWhereWithoutEmpresaParceiraInput[]
    deleteMany?: VantagemScalarWhereInput | VantagemScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<UserCreateWithoutEmpresaInput, UserUncheckedCreateWithoutEmpresaInput> | UserCreateWithoutEmpresaInput[] | UserUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEmpresaInput | UserCreateOrConnectWithoutEmpresaInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutEmpresaInput | UserUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: UserCreateManyEmpresaInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutEmpresaInput | UserUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: UserUpdateManyWithWhereWithoutEmpresaInput | UserUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type EmpresaParceiraCreateNestedOneWithoutVantagensInput = {
    create?: XOR<EmpresaParceiraCreateWithoutVantagensInput, EmpresaParceiraUncheckedCreateWithoutVantagensInput>
    connectOrCreate?: EmpresaParceiraCreateOrConnectWithoutVantagensInput
    connect?: EmpresaParceiraWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutVantagemInput = {
    create?: XOR<TransactionCreateWithoutVantagemInput, TransactionUncheckedCreateWithoutVantagemInput> | TransactionCreateWithoutVantagemInput[] | TransactionUncheckedCreateWithoutVantagemInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutVantagemInput | TransactionCreateOrConnectWithoutVantagemInput[]
    createMany?: TransactionCreateManyVantagemInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutVantagemInput = {
    create?: XOR<TransactionCreateWithoutVantagemInput, TransactionUncheckedCreateWithoutVantagemInput> | TransactionCreateWithoutVantagemInput[] | TransactionUncheckedCreateWithoutVantagemInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutVantagemInput | TransactionCreateOrConnectWithoutVantagemInput[]
    createMany?: TransactionCreateManyVantagemInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EmpresaParceiraUpdateOneRequiredWithoutVantagensNestedInput = {
    create?: XOR<EmpresaParceiraCreateWithoutVantagensInput, EmpresaParceiraUncheckedCreateWithoutVantagensInput>
    connectOrCreate?: EmpresaParceiraCreateOrConnectWithoutVantagensInput
    upsert?: EmpresaParceiraUpsertWithoutVantagensInput
    connect?: EmpresaParceiraWhereUniqueInput
    update?: XOR<XOR<EmpresaParceiraUpdateToOneWithWhereWithoutVantagensInput, EmpresaParceiraUpdateWithoutVantagensInput>, EmpresaParceiraUncheckedUpdateWithoutVantagensInput>
  }

  export type TransactionUpdateManyWithoutVantagemNestedInput = {
    create?: XOR<TransactionCreateWithoutVantagemInput, TransactionUncheckedCreateWithoutVantagemInput> | TransactionCreateWithoutVantagemInput[] | TransactionUncheckedCreateWithoutVantagemInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutVantagemInput | TransactionCreateOrConnectWithoutVantagemInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutVantagemInput | TransactionUpsertWithWhereUniqueWithoutVantagemInput[]
    createMany?: TransactionCreateManyVantagemInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutVantagemInput | TransactionUpdateWithWhereUniqueWithoutVantagemInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutVantagemInput | TransactionUpdateManyWithWhereWithoutVantagemInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutVantagemNestedInput = {
    create?: XOR<TransactionCreateWithoutVantagemInput, TransactionUncheckedCreateWithoutVantagemInput> | TransactionCreateWithoutVantagemInput[] | TransactionUncheckedCreateWithoutVantagemInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutVantagemInput | TransactionCreateOrConnectWithoutVantagemInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutVantagemInput | TransactionUpsertWithWhereUniqueWithoutVantagemInput[]
    createMany?: TransactionCreateManyVantagemInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutVantagemInput | TransactionUpdateWithWhereUniqueWithoutVantagemInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutVantagemInput | TransactionUpdateManyWithWhereWithoutVantagemInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ProfessorCreateNestedOneWithoutEnviosInput = {
    create?: XOR<ProfessorCreateWithoutEnviosInput, ProfessorUncheckedCreateWithoutEnviosInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutEnviosInput
    connect?: ProfessorWhereUniqueInput
  }

  export type AlunoCreateNestedOneWithoutRecebimentosInput = {
    create?: XOR<AlunoCreateWithoutRecebimentosInput, AlunoUncheckedCreateWithoutRecebimentosInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutRecebimentosInput
    connect?: AlunoWhereUniqueInput
  }

  export type VantagemCreateNestedOneWithoutResgatesInput = {
    create?: XOR<VantagemCreateWithoutResgatesInput, VantagemUncheckedCreateWithoutResgatesInput>
    connectOrCreate?: VantagemCreateOrConnectWithoutResgatesInput
    connect?: VantagemWhereUniqueInput
  }

  export type AlunoCreateNestedOneWithoutResgatesInput = {
    create?: XOR<AlunoCreateWithoutResgatesInput, AlunoUncheckedCreateWithoutResgatesInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutResgatesInput
    connect?: AlunoWhereUniqueInput
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type ProfessorUpdateOneWithoutEnviosNestedInput = {
    create?: XOR<ProfessorCreateWithoutEnviosInput, ProfessorUncheckedCreateWithoutEnviosInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutEnviosInput
    upsert?: ProfessorUpsertWithoutEnviosInput
    disconnect?: ProfessorWhereInput | boolean
    delete?: ProfessorWhereInput | boolean
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutEnviosInput, ProfessorUpdateWithoutEnviosInput>, ProfessorUncheckedUpdateWithoutEnviosInput>
  }

  export type AlunoUpdateOneWithoutRecebimentosNestedInput = {
    create?: XOR<AlunoCreateWithoutRecebimentosInput, AlunoUncheckedCreateWithoutRecebimentosInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutRecebimentosInput
    upsert?: AlunoUpsertWithoutRecebimentosInput
    disconnect?: AlunoWhereInput | boolean
    delete?: AlunoWhereInput | boolean
    connect?: AlunoWhereUniqueInput
    update?: XOR<XOR<AlunoUpdateToOneWithWhereWithoutRecebimentosInput, AlunoUpdateWithoutRecebimentosInput>, AlunoUncheckedUpdateWithoutRecebimentosInput>
  }

  export type VantagemUpdateOneWithoutResgatesNestedInput = {
    create?: XOR<VantagemCreateWithoutResgatesInput, VantagemUncheckedCreateWithoutResgatesInput>
    connectOrCreate?: VantagemCreateOrConnectWithoutResgatesInput
    upsert?: VantagemUpsertWithoutResgatesInput
    disconnect?: VantagemWhereInput | boolean
    delete?: VantagemWhereInput | boolean
    connect?: VantagemWhereUniqueInput
    update?: XOR<XOR<VantagemUpdateToOneWithWhereWithoutResgatesInput, VantagemUpdateWithoutResgatesInput>, VantagemUncheckedUpdateWithoutResgatesInput>
  }

  export type AlunoUpdateOneWithoutResgatesNestedInput = {
    create?: XOR<AlunoCreateWithoutResgatesInput, AlunoUncheckedCreateWithoutResgatesInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutResgatesInput
    upsert?: AlunoUpsertWithoutResgatesInput
    disconnect?: AlunoWhereInput | boolean
    delete?: AlunoWhereInput | boolean
    connect?: AlunoWhereUniqueInput
    update?: XOR<XOR<AlunoUpdateToOneWithWhereWithoutResgatesInput, AlunoUpdateWithoutResgatesInput>, AlunoUncheckedUpdateWithoutResgatesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type AlunoCreateWithoutUserInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    instituicao?: InstituicaoCreateNestedOneWithoutAlunosInput
    recebimentos?: TransactionCreateNestedManyWithoutAlunoInput
    resgates?: TransactionCreateNestedManyWithoutAlunoResgateInput
  }

  export type AlunoUncheckedCreateWithoutUserInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    instituicaoId?: string | null
    recebimentos?: TransactionUncheckedCreateNestedManyWithoutAlunoInput
    resgates?: TransactionUncheckedCreateNestedManyWithoutAlunoResgateInput
  }

  export type AlunoCreateOrConnectWithoutUserInput = {
    where: AlunoWhereUniqueInput
    create: XOR<AlunoCreateWithoutUserInput, AlunoUncheckedCreateWithoutUserInput>
  }

  export type ProfessorCreateWithoutUserInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
    instituicao?: InstituicaoCreateNestedOneWithoutProfessoresInput
    envios?: TransactionCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutUserInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
    instituicaoId?: string | null
    envios?: TransactionUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutUserInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
  }

  export type EmpresaParceiraCreateWithoutUserInput = {
    id?: string
    nome: string
    email: string
    cnpj: string
    endereco: string
    createdAt?: Date | string
    vantagens?: VantagemCreateNestedManyWithoutEmpresaParceiraInput
  }

  export type EmpresaParceiraUncheckedCreateWithoutUserInput = {
    id?: string
    nome: string
    email: string
    cnpj: string
    endereco: string
    createdAt?: Date | string
    vantagens?: VantagemUncheckedCreateNestedManyWithoutEmpresaParceiraInput
  }

  export type EmpresaParceiraCreateOrConnectWithoutUserInput = {
    where: EmpresaParceiraWhereUniqueInput
    create: XOR<EmpresaParceiraCreateWithoutUserInput, EmpresaParceiraUncheckedCreateWithoutUserInput>
  }

  export type AlunoUpsertWithoutUserInput = {
    update: XOR<AlunoUpdateWithoutUserInput, AlunoUncheckedUpdateWithoutUserInput>
    create: XOR<AlunoCreateWithoutUserInput, AlunoUncheckedCreateWithoutUserInput>
    where?: AlunoWhereInput
  }

  export type AlunoUpdateToOneWithWhereWithoutUserInput = {
    where?: AlunoWhereInput
    data: XOR<AlunoUpdateWithoutUserInput, AlunoUncheckedUpdateWithoutUserInput>
  }

  export type AlunoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao?: InstituicaoUpdateOneWithoutAlunosNestedInput
    recebimentos?: TransactionUpdateManyWithoutAlunoNestedInput
    resgates?: TransactionUpdateManyWithoutAlunoResgateNestedInput
  }

  export type AlunoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicaoId?: NullableStringFieldUpdateOperationsInput | string | null
    recebimentos?: TransactionUncheckedUpdateManyWithoutAlunoNestedInput
    resgates?: TransactionUncheckedUpdateManyWithoutAlunoResgateNestedInput
  }

  export type ProfessorUpsertWithoutUserInput = {
    update: XOR<ProfessorUpdateWithoutUserInput, ProfessorUncheckedUpdateWithoutUserInput>
    create: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutUserInput, ProfessorUncheckedUpdateWithoutUserInput>
  }

  export type ProfessorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao?: InstituicaoUpdateOneWithoutProfessoresNestedInput
    envios?: TransactionUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicaoId?: NullableStringFieldUpdateOperationsInput | string | null
    envios?: TransactionUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type EmpresaParceiraUpsertWithoutUserInput = {
    update: XOR<EmpresaParceiraUpdateWithoutUserInput, EmpresaParceiraUncheckedUpdateWithoutUserInput>
    create: XOR<EmpresaParceiraCreateWithoutUserInput, EmpresaParceiraUncheckedCreateWithoutUserInput>
    where?: EmpresaParceiraWhereInput
  }

  export type EmpresaParceiraUpdateToOneWithWhereWithoutUserInput = {
    where?: EmpresaParceiraWhereInput
    data: XOR<EmpresaParceiraUpdateWithoutUserInput, EmpresaParceiraUncheckedUpdateWithoutUserInput>
  }

  export type EmpresaParceiraUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vantagens?: VantagemUpdateManyWithoutEmpresaParceiraNestedInput
  }

  export type EmpresaParceiraUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vantagens?: VantagemUncheckedUpdateManyWithoutEmpresaParceiraNestedInput
  }

  export type AlunoCreateWithoutInstituicaoInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    user?: UserCreateNestedManyWithoutAlunoInput
    recebimentos?: TransactionCreateNestedManyWithoutAlunoInput
    resgates?: TransactionCreateNestedManyWithoutAlunoResgateInput
  }

  export type AlunoUncheckedCreateWithoutInstituicaoInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    user?: UserUncheckedCreateNestedManyWithoutAlunoInput
    recebimentos?: TransactionUncheckedCreateNestedManyWithoutAlunoInput
    resgates?: TransactionUncheckedCreateNestedManyWithoutAlunoResgateInput
  }

  export type AlunoCreateOrConnectWithoutInstituicaoInput = {
    where: AlunoWhereUniqueInput
    create: XOR<AlunoCreateWithoutInstituicaoInput, AlunoUncheckedCreateWithoutInstituicaoInput>
  }

  export type AlunoCreateManyInstituicaoInputEnvelope = {
    data: AlunoCreateManyInstituicaoInput | AlunoCreateManyInstituicaoInput[]
    skipDuplicates?: boolean
  }

  export type ProfessorCreateWithoutInstituicaoInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
    user?: UserCreateNestedManyWithoutProfessorInput
    envios?: TransactionCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutInstituicaoInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
    user?: UserUncheckedCreateNestedManyWithoutProfessorInput
    envios?: TransactionUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutInstituicaoInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutInstituicaoInput, ProfessorUncheckedCreateWithoutInstituicaoInput>
  }

  export type ProfessorCreateManyInstituicaoInputEnvelope = {
    data: ProfessorCreateManyInstituicaoInput | ProfessorCreateManyInstituicaoInput[]
    skipDuplicates?: boolean
  }

  export type AlunoUpsertWithWhereUniqueWithoutInstituicaoInput = {
    where: AlunoWhereUniqueInput
    update: XOR<AlunoUpdateWithoutInstituicaoInput, AlunoUncheckedUpdateWithoutInstituicaoInput>
    create: XOR<AlunoCreateWithoutInstituicaoInput, AlunoUncheckedCreateWithoutInstituicaoInput>
  }

  export type AlunoUpdateWithWhereUniqueWithoutInstituicaoInput = {
    where: AlunoWhereUniqueInput
    data: XOR<AlunoUpdateWithoutInstituicaoInput, AlunoUncheckedUpdateWithoutInstituicaoInput>
  }

  export type AlunoUpdateManyWithWhereWithoutInstituicaoInput = {
    where: AlunoScalarWhereInput
    data: XOR<AlunoUpdateManyMutationInput, AlunoUncheckedUpdateManyWithoutInstituicaoInput>
  }

  export type AlunoScalarWhereInput = {
    AND?: AlunoScalarWhereInput | AlunoScalarWhereInput[]
    OR?: AlunoScalarWhereInput[]
    NOT?: AlunoScalarWhereInput | AlunoScalarWhereInput[]
    id?: StringFilter<"Aluno"> | string
    nome?: StringFilter<"Aluno"> | string
    email?: StringFilter<"Aluno"> | string
    cpf?: StringFilter<"Aluno"> | string
    rg?: StringFilter<"Aluno"> | string
    endereco?: StringFilter<"Aluno"> | string
    curso?: StringFilter<"Aluno"> | string
    saldoMoedas?: IntFilter<"Aluno"> | number
    createdAt?: DateTimeFilter<"Aluno"> | Date | string
    instituicaoId?: StringNullableFilter<"Aluno"> | string | null
  }

  export type ProfessorUpsertWithWhereUniqueWithoutInstituicaoInput = {
    where: ProfessorWhereUniqueInput
    update: XOR<ProfessorUpdateWithoutInstituicaoInput, ProfessorUncheckedUpdateWithoutInstituicaoInput>
    create: XOR<ProfessorCreateWithoutInstituicaoInput, ProfessorUncheckedCreateWithoutInstituicaoInput>
  }

  export type ProfessorUpdateWithWhereUniqueWithoutInstituicaoInput = {
    where: ProfessorWhereUniqueInput
    data: XOR<ProfessorUpdateWithoutInstituicaoInput, ProfessorUncheckedUpdateWithoutInstituicaoInput>
  }

  export type ProfessorUpdateManyWithWhereWithoutInstituicaoInput = {
    where: ProfessorScalarWhereInput
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyWithoutInstituicaoInput>
  }

  export type ProfessorScalarWhereInput = {
    AND?: ProfessorScalarWhereInput | ProfessorScalarWhereInput[]
    OR?: ProfessorScalarWhereInput[]
    NOT?: ProfessorScalarWhereInput | ProfessorScalarWhereInput[]
    id?: StringFilter<"Professor"> | string
    nome?: StringFilter<"Professor"> | string
    cpf?: StringFilter<"Professor"> | string
    departamento?: StringFilter<"Professor"> | string
    saldoMoedas?: IntFilter<"Professor"> | number
    lastAllocationAt?: DateTimeNullableFilter<"Professor"> | Date | string | null
    createdAt?: DateTimeFilter<"Professor"> | Date | string
    instituicaoId?: StringNullableFilter<"Professor"> | string | null
  }

  export type InstituicaoCreateWithoutAlunosInput = {
    id?: string
    nome: string
    endereco: string
    createdAt?: Date | string
    professores?: ProfessorCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUncheckedCreateWithoutAlunosInput = {
    id?: string
    nome: string
    endereco: string
    createdAt?: Date | string
    professores?: ProfessorUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoCreateOrConnectWithoutAlunosInput = {
    where: InstituicaoWhereUniqueInput
    create: XOR<InstituicaoCreateWithoutAlunosInput, InstituicaoUncheckedCreateWithoutAlunosInput>
  }

  export type UserCreateWithoutAlunoInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    professor?: ProfessorCreateNestedOneWithoutUserInput
    empresa?: EmpresaParceiraCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAlunoInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    professorId?: string | null
    empresaId?: string | null
  }

  export type UserCreateOrConnectWithoutAlunoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlunoInput, UserUncheckedCreateWithoutAlunoInput>
  }

  export type UserCreateManyAlunoInputEnvelope = {
    data: UserCreateManyAlunoInput | UserCreateManyAlunoInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutAlunoInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professor?: ProfessorCreateNestedOneWithoutEnviosInput
    vantagem?: VantagemCreateNestedOneWithoutResgatesInput
    alunoResgate?: AlunoCreateNestedOneWithoutResgatesInput
  }

  export type TransactionUncheckedCreateWithoutAlunoInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professorId?: string | null
    vantagemId?: string | null
    alunoResgateId?: string | null
  }

  export type TransactionCreateOrConnectWithoutAlunoInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutAlunoInput, TransactionUncheckedCreateWithoutAlunoInput>
  }

  export type TransactionCreateManyAlunoInputEnvelope = {
    data: TransactionCreateManyAlunoInput | TransactionCreateManyAlunoInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutAlunoResgateInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professor?: ProfessorCreateNestedOneWithoutEnviosInput
    aluno?: AlunoCreateNestedOneWithoutRecebimentosInput
    vantagem?: VantagemCreateNestedOneWithoutResgatesInput
  }

  export type TransactionUncheckedCreateWithoutAlunoResgateInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professorId?: string | null
    alunoId?: string | null
    vantagemId?: string | null
  }

  export type TransactionCreateOrConnectWithoutAlunoResgateInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutAlunoResgateInput, TransactionUncheckedCreateWithoutAlunoResgateInput>
  }

  export type TransactionCreateManyAlunoResgateInputEnvelope = {
    data: TransactionCreateManyAlunoResgateInput | TransactionCreateManyAlunoResgateInput[]
    skipDuplicates?: boolean
  }

  export type InstituicaoUpsertWithoutAlunosInput = {
    update: XOR<InstituicaoUpdateWithoutAlunosInput, InstituicaoUncheckedUpdateWithoutAlunosInput>
    create: XOR<InstituicaoCreateWithoutAlunosInput, InstituicaoUncheckedCreateWithoutAlunosInput>
    where?: InstituicaoWhereInput
  }

  export type InstituicaoUpdateToOneWithWhereWithoutAlunosInput = {
    where?: InstituicaoWhereInput
    data: XOR<InstituicaoUpdateWithoutAlunosInput, InstituicaoUncheckedUpdateWithoutAlunosInput>
  }

  export type InstituicaoUpdateWithoutAlunosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professores?: ProfessorUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUncheckedUpdateWithoutAlunosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professores?: ProfessorUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutAlunoInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAlunoInput, UserUncheckedUpdateWithoutAlunoInput>
    create: XOR<UserCreateWithoutAlunoInput, UserUncheckedCreateWithoutAlunoInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAlunoInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAlunoInput, UserUncheckedUpdateWithoutAlunoInput>
  }

  export type UserUpdateManyWithWhereWithoutAlunoInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAlunoInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    alunoId?: StringNullableFilter<"User"> | string | null
    professorId?: StringNullableFilter<"User"> | string | null
    empresaId?: StringNullableFilter<"User"> | string | null
  }

  export type TransactionUpsertWithWhereUniqueWithoutAlunoInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutAlunoInput, TransactionUncheckedUpdateWithoutAlunoInput>
    create: XOR<TransactionCreateWithoutAlunoInput, TransactionUncheckedCreateWithoutAlunoInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutAlunoInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutAlunoInput, TransactionUncheckedUpdateWithoutAlunoInput>
  }

  export type TransactionUpdateManyWithWhereWithoutAlunoInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutAlunoInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    amount?: IntFilter<"Transaction"> | number
    message?: StringNullableFilter<"Transaction"> | string | null
    couponCode?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    professorId?: StringNullableFilter<"Transaction"> | string | null
    alunoId?: StringNullableFilter<"Transaction"> | string | null
    vantagemId?: StringNullableFilter<"Transaction"> | string | null
    alunoResgateId?: StringNullableFilter<"Transaction"> | string | null
  }

  export type TransactionUpsertWithWhereUniqueWithoutAlunoResgateInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutAlunoResgateInput, TransactionUncheckedUpdateWithoutAlunoResgateInput>
    create: XOR<TransactionCreateWithoutAlunoResgateInput, TransactionUncheckedCreateWithoutAlunoResgateInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutAlunoResgateInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutAlunoResgateInput, TransactionUncheckedUpdateWithoutAlunoResgateInput>
  }

  export type TransactionUpdateManyWithWhereWithoutAlunoResgateInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutAlunoResgateInput>
  }

  export type InstituicaoCreateWithoutProfessoresInput = {
    id?: string
    nome: string
    endereco: string
    createdAt?: Date | string
    alunos?: AlunoCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoUncheckedCreateWithoutProfessoresInput = {
    id?: string
    nome: string
    endereco: string
    createdAt?: Date | string
    alunos?: AlunoUncheckedCreateNestedManyWithoutInstituicaoInput
  }

  export type InstituicaoCreateOrConnectWithoutProfessoresInput = {
    where: InstituicaoWhereUniqueInput
    create: XOR<InstituicaoCreateWithoutProfessoresInput, InstituicaoUncheckedCreateWithoutProfessoresInput>
  }

  export type UserCreateWithoutProfessorInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    aluno?: AlunoCreateNestedOneWithoutUserInput
    empresa?: EmpresaParceiraCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfessorInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    alunoId?: string | null
    empresaId?: string | null
  }

  export type UserCreateOrConnectWithoutProfessorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
  }

  export type UserCreateManyProfessorInputEnvelope = {
    data: UserCreateManyProfessorInput | UserCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutProfessorInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    aluno?: AlunoCreateNestedOneWithoutRecebimentosInput
    vantagem?: VantagemCreateNestedOneWithoutResgatesInput
    alunoResgate?: AlunoCreateNestedOneWithoutResgatesInput
  }

  export type TransactionUncheckedCreateWithoutProfessorInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    alunoId?: string | null
    vantagemId?: string | null
    alunoResgateId?: string | null
  }

  export type TransactionCreateOrConnectWithoutProfessorInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutProfessorInput, TransactionUncheckedCreateWithoutProfessorInput>
  }

  export type TransactionCreateManyProfessorInputEnvelope = {
    data: TransactionCreateManyProfessorInput | TransactionCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type InstituicaoUpsertWithoutProfessoresInput = {
    update: XOR<InstituicaoUpdateWithoutProfessoresInput, InstituicaoUncheckedUpdateWithoutProfessoresInput>
    create: XOR<InstituicaoCreateWithoutProfessoresInput, InstituicaoUncheckedCreateWithoutProfessoresInput>
    where?: InstituicaoWhereInput
  }

  export type InstituicaoUpdateToOneWithWhereWithoutProfessoresInput = {
    where?: InstituicaoWhereInput
    data: XOR<InstituicaoUpdateWithoutProfessoresInput, InstituicaoUncheckedUpdateWithoutProfessoresInput>
  }

  export type InstituicaoUpdateWithoutProfessoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunos?: AlunoUpdateManyWithoutInstituicaoNestedInput
  }

  export type InstituicaoUncheckedUpdateWithoutProfessoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunos?: AlunoUncheckedUpdateManyWithoutInstituicaoNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutProfessorInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutProfessorInput, UserUncheckedUpdateWithoutProfessorInput>
    create: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
  }

  export type UserUpdateWithWhereUniqueWithoutProfessorInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutProfessorInput, UserUncheckedUpdateWithoutProfessorInput>
  }

  export type UserUpdateManyWithWhereWithoutProfessorInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutProfessorInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutProfessorInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutProfessorInput, TransactionUncheckedUpdateWithoutProfessorInput>
    create: XOR<TransactionCreateWithoutProfessorInput, TransactionUncheckedCreateWithoutProfessorInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutProfessorInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutProfessorInput, TransactionUncheckedUpdateWithoutProfessorInput>
  }

  export type TransactionUpdateManyWithWhereWithoutProfessorInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutProfessorInput>
  }

  export type VantagemCreateWithoutEmpresaParceiraInput = {
    id?: string
    titulo: string
    descricao: string
    custoEmMoedas: number
    fotoUrl?: string | null
    createdAt?: Date | string
    resgates?: TransactionCreateNestedManyWithoutVantagemInput
  }

  export type VantagemUncheckedCreateWithoutEmpresaParceiraInput = {
    id?: string
    titulo: string
    descricao: string
    custoEmMoedas: number
    fotoUrl?: string | null
    createdAt?: Date | string
    resgates?: TransactionUncheckedCreateNestedManyWithoutVantagemInput
  }

  export type VantagemCreateOrConnectWithoutEmpresaParceiraInput = {
    where: VantagemWhereUniqueInput
    create: XOR<VantagemCreateWithoutEmpresaParceiraInput, VantagemUncheckedCreateWithoutEmpresaParceiraInput>
  }

  export type VantagemCreateManyEmpresaParceiraInputEnvelope = {
    data: VantagemCreateManyEmpresaParceiraInput | VantagemCreateManyEmpresaParceiraInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutEmpresaInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    aluno?: AlunoCreateNestedOneWithoutUserInput
    professor?: ProfessorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmpresaInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    alunoId?: string | null
    professorId?: string | null
  }

  export type UserCreateOrConnectWithoutEmpresaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmpresaInput, UserUncheckedCreateWithoutEmpresaInput>
  }

  export type UserCreateManyEmpresaInputEnvelope = {
    data: UserCreateManyEmpresaInput | UserCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type VantagemUpsertWithWhereUniqueWithoutEmpresaParceiraInput = {
    where: VantagemWhereUniqueInput
    update: XOR<VantagemUpdateWithoutEmpresaParceiraInput, VantagemUncheckedUpdateWithoutEmpresaParceiraInput>
    create: XOR<VantagemCreateWithoutEmpresaParceiraInput, VantagemUncheckedCreateWithoutEmpresaParceiraInput>
  }

  export type VantagemUpdateWithWhereUniqueWithoutEmpresaParceiraInput = {
    where: VantagemWhereUniqueInput
    data: XOR<VantagemUpdateWithoutEmpresaParceiraInput, VantagemUncheckedUpdateWithoutEmpresaParceiraInput>
  }

  export type VantagemUpdateManyWithWhereWithoutEmpresaParceiraInput = {
    where: VantagemScalarWhereInput
    data: XOR<VantagemUpdateManyMutationInput, VantagemUncheckedUpdateManyWithoutEmpresaParceiraInput>
  }

  export type VantagemScalarWhereInput = {
    AND?: VantagemScalarWhereInput | VantagemScalarWhereInput[]
    OR?: VantagemScalarWhereInput[]
    NOT?: VantagemScalarWhereInput | VantagemScalarWhereInput[]
    id?: StringFilter<"Vantagem"> | string
    titulo?: StringFilter<"Vantagem"> | string
    descricao?: StringFilter<"Vantagem"> | string
    custoEmMoedas?: IntFilter<"Vantagem"> | number
    fotoUrl?: StringNullableFilter<"Vantagem"> | string | null
    createdAt?: DateTimeFilter<"Vantagem"> | Date | string
    empresaParceiraId?: StringFilter<"Vantagem"> | string
  }

  export type UserUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutEmpresaInput, UserUncheckedUpdateWithoutEmpresaInput>
    create: XOR<UserCreateWithoutEmpresaInput, UserUncheckedCreateWithoutEmpresaInput>
  }

  export type UserUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutEmpresaInput, UserUncheckedUpdateWithoutEmpresaInput>
  }

  export type UserUpdateManyWithWhereWithoutEmpresaInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type EmpresaParceiraCreateWithoutVantagensInput = {
    id?: string
    nome: string
    email: string
    cnpj: string
    endereco: string
    createdAt?: Date | string
    user?: UserCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaParceiraUncheckedCreateWithoutVantagensInput = {
    id?: string
    nome: string
    email: string
    cnpj: string
    endereco: string
    createdAt?: Date | string
    user?: UserUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaParceiraCreateOrConnectWithoutVantagensInput = {
    where: EmpresaParceiraWhereUniqueInput
    create: XOR<EmpresaParceiraCreateWithoutVantagensInput, EmpresaParceiraUncheckedCreateWithoutVantagensInput>
  }

  export type TransactionCreateWithoutVantagemInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professor?: ProfessorCreateNestedOneWithoutEnviosInput
    aluno?: AlunoCreateNestedOneWithoutRecebimentosInput
    alunoResgate?: AlunoCreateNestedOneWithoutResgatesInput
  }

  export type TransactionUncheckedCreateWithoutVantagemInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professorId?: string | null
    alunoId?: string | null
    alunoResgateId?: string | null
  }

  export type TransactionCreateOrConnectWithoutVantagemInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutVantagemInput, TransactionUncheckedCreateWithoutVantagemInput>
  }

  export type TransactionCreateManyVantagemInputEnvelope = {
    data: TransactionCreateManyVantagemInput | TransactionCreateManyVantagemInput[]
    skipDuplicates?: boolean
  }

  export type EmpresaParceiraUpsertWithoutVantagensInput = {
    update: XOR<EmpresaParceiraUpdateWithoutVantagensInput, EmpresaParceiraUncheckedUpdateWithoutVantagensInput>
    create: XOR<EmpresaParceiraCreateWithoutVantagensInput, EmpresaParceiraUncheckedCreateWithoutVantagensInput>
    where?: EmpresaParceiraWhereInput
  }

  export type EmpresaParceiraUpdateToOneWithWhereWithoutVantagensInput = {
    where?: EmpresaParceiraWhereInput
    data: XOR<EmpresaParceiraUpdateWithoutVantagensInput, EmpresaParceiraUncheckedUpdateWithoutVantagensInput>
  }

  export type EmpresaParceiraUpdateWithoutVantagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaParceiraUncheckedUpdateWithoutVantagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutVantagemInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutVantagemInput, TransactionUncheckedUpdateWithoutVantagemInput>
    create: XOR<TransactionCreateWithoutVantagemInput, TransactionUncheckedCreateWithoutVantagemInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutVantagemInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutVantagemInput, TransactionUncheckedUpdateWithoutVantagemInput>
  }

  export type TransactionUpdateManyWithWhereWithoutVantagemInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutVantagemInput>
  }

  export type ProfessorCreateWithoutEnviosInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
    instituicao?: InstituicaoCreateNestedOneWithoutProfessoresInput
    user?: UserCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutEnviosInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
    instituicaoId?: string | null
    user?: UserUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutEnviosInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutEnviosInput, ProfessorUncheckedCreateWithoutEnviosInput>
  }

  export type AlunoCreateWithoutRecebimentosInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    instituicao?: InstituicaoCreateNestedOneWithoutAlunosInput
    user?: UserCreateNestedManyWithoutAlunoInput
    resgates?: TransactionCreateNestedManyWithoutAlunoResgateInput
  }

  export type AlunoUncheckedCreateWithoutRecebimentosInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    instituicaoId?: string | null
    user?: UserUncheckedCreateNestedManyWithoutAlunoInput
    resgates?: TransactionUncheckedCreateNestedManyWithoutAlunoResgateInput
  }

  export type AlunoCreateOrConnectWithoutRecebimentosInput = {
    where: AlunoWhereUniqueInput
    create: XOR<AlunoCreateWithoutRecebimentosInput, AlunoUncheckedCreateWithoutRecebimentosInput>
  }

  export type VantagemCreateWithoutResgatesInput = {
    id?: string
    titulo: string
    descricao: string
    custoEmMoedas: number
    fotoUrl?: string | null
    createdAt?: Date | string
    empresaParceira: EmpresaParceiraCreateNestedOneWithoutVantagensInput
  }

  export type VantagemUncheckedCreateWithoutResgatesInput = {
    id?: string
    titulo: string
    descricao: string
    custoEmMoedas: number
    fotoUrl?: string | null
    createdAt?: Date | string
    empresaParceiraId: string
  }

  export type VantagemCreateOrConnectWithoutResgatesInput = {
    where: VantagemWhereUniqueInput
    create: XOR<VantagemCreateWithoutResgatesInput, VantagemUncheckedCreateWithoutResgatesInput>
  }

  export type AlunoCreateWithoutResgatesInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    instituicao?: InstituicaoCreateNestedOneWithoutAlunosInput
    user?: UserCreateNestedManyWithoutAlunoInput
    recebimentos?: TransactionCreateNestedManyWithoutAlunoInput
  }

  export type AlunoUncheckedCreateWithoutResgatesInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
    instituicaoId?: string | null
    user?: UserUncheckedCreateNestedManyWithoutAlunoInput
    recebimentos?: TransactionUncheckedCreateNestedManyWithoutAlunoInput
  }

  export type AlunoCreateOrConnectWithoutResgatesInput = {
    where: AlunoWhereUniqueInput
    create: XOR<AlunoCreateWithoutResgatesInput, AlunoUncheckedCreateWithoutResgatesInput>
  }

  export type ProfessorUpsertWithoutEnviosInput = {
    update: XOR<ProfessorUpdateWithoutEnviosInput, ProfessorUncheckedUpdateWithoutEnviosInput>
    create: XOR<ProfessorCreateWithoutEnviosInput, ProfessorUncheckedCreateWithoutEnviosInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutEnviosInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutEnviosInput, ProfessorUncheckedUpdateWithoutEnviosInput>
  }

  export type ProfessorUpdateWithoutEnviosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao?: InstituicaoUpdateOneWithoutProfessoresNestedInput
    user?: UserUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutEnviosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicaoId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type AlunoUpsertWithoutRecebimentosInput = {
    update: XOR<AlunoUpdateWithoutRecebimentosInput, AlunoUncheckedUpdateWithoutRecebimentosInput>
    create: XOR<AlunoCreateWithoutRecebimentosInput, AlunoUncheckedCreateWithoutRecebimentosInput>
    where?: AlunoWhereInput
  }

  export type AlunoUpdateToOneWithWhereWithoutRecebimentosInput = {
    where?: AlunoWhereInput
    data: XOR<AlunoUpdateWithoutRecebimentosInput, AlunoUncheckedUpdateWithoutRecebimentosInput>
  }

  export type AlunoUpdateWithoutRecebimentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao?: InstituicaoUpdateOneWithoutAlunosNestedInput
    user?: UserUpdateManyWithoutAlunoNestedInput
    resgates?: TransactionUpdateManyWithoutAlunoResgateNestedInput
  }

  export type AlunoUncheckedUpdateWithoutRecebimentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicaoId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUncheckedUpdateManyWithoutAlunoNestedInput
    resgates?: TransactionUncheckedUpdateManyWithoutAlunoResgateNestedInput
  }

  export type VantagemUpsertWithoutResgatesInput = {
    update: XOR<VantagemUpdateWithoutResgatesInput, VantagemUncheckedUpdateWithoutResgatesInput>
    create: XOR<VantagemCreateWithoutResgatesInput, VantagemUncheckedCreateWithoutResgatesInput>
    where?: VantagemWhereInput
  }

  export type VantagemUpdateToOneWithWhereWithoutResgatesInput = {
    where?: VantagemWhereInput
    data: XOR<VantagemUpdateWithoutResgatesInput, VantagemUncheckedUpdateWithoutResgatesInput>
  }

  export type VantagemUpdateWithoutResgatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    custoEmMoedas?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empresaParceira?: EmpresaParceiraUpdateOneRequiredWithoutVantagensNestedInput
  }

  export type VantagemUncheckedUpdateWithoutResgatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    custoEmMoedas?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    empresaParceiraId?: StringFieldUpdateOperationsInput | string
  }

  export type AlunoUpsertWithoutResgatesInput = {
    update: XOR<AlunoUpdateWithoutResgatesInput, AlunoUncheckedUpdateWithoutResgatesInput>
    create: XOR<AlunoCreateWithoutResgatesInput, AlunoUncheckedCreateWithoutResgatesInput>
    where?: AlunoWhereInput
  }

  export type AlunoUpdateToOneWithWhereWithoutResgatesInput = {
    where?: AlunoWhereInput
    data: XOR<AlunoUpdateWithoutResgatesInput, AlunoUncheckedUpdateWithoutResgatesInput>
  }

  export type AlunoUpdateWithoutResgatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicao?: InstituicaoUpdateOneWithoutAlunosNestedInput
    user?: UserUpdateManyWithoutAlunoNestedInput
    recebimentos?: TransactionUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoUncheckedUpdateWithoutResgatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instituicaoId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUncheckedUpdateManyWithoutAlunoNestedInput
    recebimentos?: TransactionUncheckedUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoCreateManyInstituicaoInput = {
    id?: string
    nome: string
    email: string
    cpf: string
    rg: string
    endereco: string
    curso: string
    saldoMoedas?: number
    createdAt?: Date | string
  }

  export type ProfessorCreateManyInstituicaoInput = {
    id?: string
    nome: string
    cpf: string
    departamento: string
    saldoMoedas?: number
    lastAllocationAt?: Date | string | null
    createdAt?: Date | string
  }

  export type AlunoUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateManyWithoutAlunoNestedInput
    recebimentos?: TransactionUpdateManyWithoutAlunoNestedInput
    resgates?: TransactionUpdateManyWithoutAlunoResgateNestedInput
  }

  export type AlunoUncheckedUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateManyWithoutAlunoNestedInput
    recebimentos?: TransactionUncheckedUpdateManyWithoutAlunoNestedInput
    resgates?: TransactionUncheckedUpdateManyWithoutAlunoResgateNestedInput
  }

  export type AlunoUncheckedUpdateManyWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    curso?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessorUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateManyWithoutProfessorNestedInput
    envios?: TransactionUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateManyWithoutProfessorNestedInput
    envios?: TransactionUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateManyWithoutInstituicaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    departamento?: StringFieldUpdateOperationsInput | string
    saldoMoedas?: IntFieldUpdateOperationsInput | number
    lastAllocationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyAlunoInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    professorId?: string | null
    empresaId?: string | null
  }

  export type TransactionCreateManyAlunoInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professorId?: string | null
    vantagemId?: string | null
    alunoResgateId?: string | null
  }

  export type TransactionCreateManyAlunoResgateInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professorId?: string | null
    alunoId?: string | null
    vantagemId?: string | null
  }

  export type UserUpdateWithoutAlunoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUpdateOneWithoutUserNestedInput
    empresa?: EmpresaParceiraUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAlunoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutAlunoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUpdateWithoutAlunoInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUpdateOneWithoutEnviosNestedInput
    vantagem?: VantagemUpdateOneWithoutResgatesNestedInput
    alunoResgate?: AlunoUpdateOneWithoutResgatesNestedInput
  }

  export type TransactionUncheckedUpdateWithoutAlunoInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    vantagemId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoResgateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateManyWithoutAlunoInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    vantagemId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoResgateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUpdateWithoutAlunoResgateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUpdateOneWithoutEnviosNestedInput
    aluno?: AlunoUpdateOneWithoutRecebimentosNestedInput
    vantagem?: VantagemUpdateOneWithoutResgatesNestedInput
  }

  export type TransactionUncheckedUpdateWithoutAlunoResgateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    vantagemId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateManyWithoutAlunoResgateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    vantagemId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyProfessorInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    alunoId?: string | null
    empresaId?: string | null
  }

  export type TransactionCreateManyProfessorInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    alunoId?: string | null
    vantagemId?: string | null
    alunoResgateId?: string | null
  }

  export type UserUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aluno?: AlunoUpdateOneWithoutUserNestedInput
    empresa?: EmpresaParceiraUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aluno?: AlunoUpdateOneWithoutRecebimentosNestedInput
    vantagem?: VantagemUpdateOneWithoutResgatesNestedInput
    alunoResgate?: AlunoUpdateOneWithoutResgatesNestedInput
  }

  export type TransactionUncheckedUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    vantagemId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoResgateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateManyWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    vantagemId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoResgateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VantagemCreateManyEmpresaParceiraInput = {
    id?: string
    titulo: string
    descricao: string
    custoEmMoedas: number
    fotoUrl?: string | null
    createdAt?: Date | string
  }

  export type UserCreateManyEmpresaInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    alunoId?: string | null
    professorId?: string | null
  }

  export type VantagemUpdateWithoutEmpresaParceiraInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    custoEmMoedas?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resgates?: TransactionUpdateManyWithoutVantagemNestedInput
  }

  export type VantagemUncheckedUpdateWithoutEmpresaParceiraInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    custoEmMoedas?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resgates?: TransactionUncheckedUpdateManyWithoutVantagemNestedInput
  }

  export type VantagemUncheckedUpdateManyWithoutEmpresaParceiraInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    custoEmMoedas?: IntFieldUpdateOperationsInput | number
    fotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutEmpresaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aluno?: AlunoUpdateOneWithoutUserNestedInput
    professor?: ProfessorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmpresaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutEmpresaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionCreateManyVantagemInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    message?: string | null
    couponCode?: string | null
    createdAt?: Date | string
    professorId?: string | null
    alunoId?: string | null
    alunoResgateId?: string | null
  }

  export type TransactionUpdateWithoutVantagemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUpdateOneWithoutEnviosNestedInput
    aluno?: AlunoUpdateOneWithoutRecebimentosNestedInput
    alunoResgate?: AlunoUpdateOneWithoutResgatesNestedInput
  }

  export type TransactionUncheckedUpdateWithoutVantagemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoResgateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateManyWithoutVantagemInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    couponCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professorId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoId?: NullableStringFieldUpdateOperationsInput | string | null
    alunoResgateId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use InstituicaoCountOutputTypeDefaultArgs instead
     */
    export type InstituicaoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InstituicaoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlunoCountOutputTypeDefaultArgs instead
     */
    export type AlunoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlunoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessorCountOutputTypeDefaultArgs instead
     */
    export type ProfessorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmpresaParceiraCountOutputTypeDefaultArgs instead
     */
    export type EmpresaParceiraCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmpresaParceiraCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VantagemCountOutputTypeDefaultArgs instead
     */
    export type VantagemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VantagemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstituicaoDefaultArgs instead
     */
    export type InstituicaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InstituicaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlunoDefaultArgs instead
     */
    export type AlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlunoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessorDefaultArgs instead
     */
    export type ProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmpresaParceiraDefaultArgs instead
     */
    export type EmpresaParceiraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmpresaParceiraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VantagemDefaultArgs instead
     */
    export type VantagemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VantagemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionDefaultArgs instead
     */
    export type TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}